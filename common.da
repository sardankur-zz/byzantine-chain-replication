import json
import random

class OpArgs():
    def __init__(self, opType, key, val=None):
        self.opType = opType
        self.key = key
        self.val = val
    
    def __repr__(self):
        return str(self)

    def __str__(self):
        return "%s - %s - %s" % (self.opType, self.key, self.val)

    def __eq__(self, that):
        return self.opType == that.opType and self.key == that.key and self.val == that.val

class OrderStatement():
    def __init__(self, slot_number, operation, signature):
        self.slot_number = slot_number
        self.operation = operation
        self.signature = signature

    def __repr__(self):
        return str(self)

    def __str__(self):
        return "%s - %s - signature" % (self.slot_number, self.operation)
    
    def __eq__(self, that):
        return self.slot_number == that.slot_number and self.operation == that.operation and self.signature == that.signature    

class ResultStatement():
    def __init__(self, operation, result_hash, signature):
        self.operation = operation
        self.result_hash = result_hash
        self.signature = signature

    def __repr__(self):
        return str(self)

    def __str__(self):
        return "%s - %s - signature" % (self.operation, self.result_hash)

class CheckpointStatement():
    def __init__(self, ending_slot:int, running_state_hash, signature):
        self.ending_slot = ending_slot
        self.running_state_hash = running_state_hash
        self.signature = signature

    def __repr__(self):
        return str(self)

    def __str__(self):
        return "%s - %s - signature" % (self.ending_slot, self.running_state_hash)

    def __eq__(self, that):
        return self.ending_slot == that.ending_slot and self.running_state_hash == that.running_state_hash and self.signature == that.signature  

class Shuttle():
    def __init__(self, slot_number, opArgs, client, cid, requestIndex, isCheckpointingShuttle:bool, clientSignature):
        self.slot_number = slot_number
        self.client = client
        self.cid = cid
        self.requestIndex = requestIndex
        self.opArgs = opArgs
        self.order_proof = []
        self.result_proof = []
        self.checkpoint_proof = None
        self.clientSignature = clientSignature
        if isCheckpointingShuttle:
            self.checkpoint_proof = [] 

    def __repr__(self):
        return str(self)

    def __str__(self):
        return str("Slot_number: %d Cid: %d requestIndex: %d\nOpt Args : %s\norder_proof: %s\nresult_proof: %s\n checkpoint_proof = %s" % (self.slot_number, self.cid, self.requestIndex, self.opArgs, self.order_proof, self.result_proof, self.checkpoint_proof))


class ResultShuttle():
    def __init__(self, shuttle:Shuttle, result):
        self.slot_number = shuttle.slot_number
        self.client = shuttle.client
        self.cid = shuttle.cid
        self.requestIndex = shuttle.requestIndex
        self.opArgs = shuttle.opArgs
        self.result_proof = shuttle.result_proof
        self.checkpoint_proof = shuttle.checkpoint_proof
        self.result = result
    
    def __repr__(self):
        return str(self)

    def __str__(self):
        return str("Slot_number: %d Cid: %d requestIndex: %d result_proof: %s\n result: %s\n checkpoint_proof = %s" % (self.slot_number, self.cid, self.requestIndex,  self.result_proof, self.result, self.checkpoint_proof))

class Operation():

    @staticmethod
    def put(dictionary, key, val):
        dictionary[key] = val
        return 'OK'
    @staticmethod
    def get(dictionary, key):
        return dictionary.get(key,'')

    @staticmethod
    def slice(dictionary, key, slice):
        split = slice.split(":")
        if key in dictionary.keys():  # TODO: check whether slice is valid or not
            try:
                dictionary[key] = dictionary[key][int(split[0]): int(split[1])]
                return 'OK'
            except:
                pass

        return 'fail'

    @staticmethod
    def append(dictionary, key, val):
        if key in dictionary.keys():
            dictionary[key] = dictionary[key] + val
            return 'OK'
        else:
            return 'fail'

    @staticmethod
    def do_op(dictionary, opArgs):
        if opArgs.opType == 'put':
            return Operation.put(dictionary, opArgs.key, opArgs.val)
        elif opArgs.opType == 'get':
            return Operation.get(dictionary, opArgs.key)
        elif opArgs.opType == 'slice':
            return Operation.slice(dictionary, opArgs.key, opArgs.val)
        elif opArgs.opType == 'append':
            return Operation.append(dictionary, opArgs.key, opArgs.val)
        else:
            raise Exception("Invalid Operation")

    @staticmethod
    def generate_requests(seed, n):
        random.seed(seed)
        ops = ['put', 'get', 'slice', 'append']
        keys = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']
        vals = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']
        opSequence = []

        for i in range(n):
            op = ops[random.randint(0, len(ops) - 1)]
            key = keys[random.randint(0, len(keys) - 1)]
            val = vals[random.randint(0, len(vals) - 1)]
            if op == 'slice':
                opSequence.append([op, key, "%d:%d" % (random.randint(0, 3), random.randint(0,5))])
            else:
                opSequence.append([op, key, val])

        return opSequence

class Config():
    def __init__(self):
        self.config_id = 0
        self.replicas = None
        self.head = None
        self.tail = None
        self.private_keys = []
        self.public_keys = []
        self.client_private_keys = []
        self.client_public_keys = []

class ReplicaState():
    def __init__(self, rid, dictionary):
        self.rid = rid
        self.dictionary = dictionary

    def __repr__(self):
        return str(self)

    def __str__(self):
        return json.dumps(self.__dict__)
