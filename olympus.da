import json
import nacl.signing

get_logger = import_da("app_logging").get_logger
Replica = import_da("replica").Replica
common = import_da("common")
Config = common.Config

logger = get_logger("OLYMPUS")

class Olympus(process):

    def setup(head_timeout: int, nonhead_timeout: int, t: int, failures):
        self.on = True
        self.configs = []
        self.default_timeout = 3
        logger.info("setup Completed")


    # receivers
    def run():
        await(self.on == False)


    def receive(msg=('latest_configuration_request', cid), from_=p):
        logger.info("Request for latest configuration from cid = %d" % cid)
        send(('latest_configuration_response', self.configs[len(self.configs) - 1]), to=p)


    def receive(msg=('reconfigure_client_request', result_proof), from_=p):
        pass

    def receive(msg=('reconfigure'), from_=p):
        logger.info("Received Reconfigure Request")

        replicas = self.configs[len(self.configs) - 1].replicas
        send(('wedge_request'), to=replicas)

    def receive(msg=('init',), from_=p):
        logger.info("Init received")

        config = Config()

        failure_cases = failures.get(str(0), {})
        
        # initializing replicas
        config.replicas = new(Replica, num=2 * t + 1)

        replica_list = list(config.replicas)
        config.head = replica_list[0]
        config.tail = replica_list[len(replica_list) - 1]
        
        #initialize public and private keys
        for i in range(2*t + 1):
            signingKey = nacl.signing.SigningKey.generate()
            config.private_keys.append(signingKey)
            config.public_keys.append(signingKey.verify_key)

        #Setting up the replicas 
        for i in range(2*t + 1):
            setup(replica_list[i], (head_timeout, nonhead_timeout, i, self, replica_list, config.private_keys[i], config.public_keys, failure_cases.get(str(i), [])))

        start(config.replicas)
        self.configs.append(config)


    def receive(msg=("shutdown",), from_=p):
        logger.info("Request for shutdown")
        replicas = self.configs[len(self.configs) - 1].replicas
        send(('shutdown',), to=replicas)
        replica_state = None

        if await(len(setof(p, received(('shut', replica_state), from_=p))) == len(list(replicas))):
            replica_states = setof(replica_state, received(('shut', replica_state), from_=p))
        elif timeout(self.default_timeout):
            replica_states = setof(replica_state, received(('shut', replica_state), from_=p))

        deserialized_states = []
        for replica_state in replica_states:
            replica_state = json.loads(replica_state)
            deserialized_states.append(replica_state)

        send(('shut', json.dumps(deserialized_states)), to=p)
        self.on = False

