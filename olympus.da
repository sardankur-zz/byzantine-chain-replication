import json
import nacl.signing
import time
import os
import copy
import itertools

app_logging = import_da("app_logging")
replica = import_da("replica")
common = import_da("common")
utils = import_da("utils")

from common import *
from replica import *
from utils import *

logger = app_logging.get_logger("OLYMPUS")

class Olympus(process):

    def setup(head_timeout: int, nonhead_timeout: int, t: int, failures, host_replica,
        clients, checkpoint_trigger):
    
        self.on = True
        self.systemState = 'Normal' 
        self.wait_T = 0.5
        self.configs = []
        self.latest_config = None
        self.default_timeout = 3
        self.order_proof_history = {}
        self.last_checkpointed_slots = {}
        self.checkpointStatements = {}    
        self.caught_up_statement = {}        

        formatter = logging.Formatter("%(asctime)s : %(levelname)5s : %(name)9s : %(message)s")
        app_logging.set_formatter(logger, formatter)        

        logger.info("Setup Completed")


    # receivers
    def run():
        logger.info("Running")
        await(self.on == False)        
        logger.info("Terminated")    


    def receive(msg=('latest_configuration_request', cid), from_=p):
        logger.info("Request for latest configuration from cid = %d" % cid)        
        if (self.systemState == 'Reconfiguring'):            
            send(('latest_configuration_response', None), to=p)
        else:
            send(('latest_configuration_response', self.latest_config), to=p)


    def receive(msg=('reconfigure_client_request', opArgs, result_proof, result), from_=p):
        logger.info("Received Reconfigure Request from client")
        if(result_proof is None or 
          not isvalidResultProof(opArgs, result, result_proof, self.latest_config.public_keys)):
            logger.info("Forwarding client request with valid proof of misbehavior for Reconfiguration")
            send(('reconfigure', self.latest_config.config_id), to=self)

        logger.info("Client request for reconfiguration has valid proof of misbehavior for Reconfiguration")    


    def receive(msg=('reconfigure', config_id), from_=p):

        
        # Don't entertain repeated requests before reconfiguration is done 
        if ((config_id < self.latest_config.config_id) or (config_id == self.latest_config.config_id and self.systemState == 'Reconfiguring')):            
            logger.info("Reconfigure: Duplicate Reconfigure Request")
            return

        self.systemState = 'Reconfiguring'
        logger.info("Reconfigure: Processing Reconfigure Request")

        self.order_proof_history = {}
        self.last_checkpointed_slots = {}
        self.checkpointStatements = {}      
        replicas = self.latest_config.replicas
        
        logger.info("Reconfigure: Sending wedge requests to all replicas")
        for replica in replicas:
            send(('wedge_request'), to=replica)

        logger.info("Reconfigure: Awaiting wedged responses from all replicas")

        if(await(len(self.order_proof_history) == len(replicas))):
            pass
        elif timeout(self.wait_T):    
            pass
        
        logger.info("Reconfigure: Received wedged response from %d replicas" % len(self.order_proof_history))              
        
        valid_history = copy.copy(self.order_proof_history)
        filter_invalid_order_proof_history(valid_history)
        
        logger.info("Quorum: Removing replicas with invalid history") 
        Q_list = sorted(list(itertools.combinations(list(valid_history.keys()), self.t+1)))
        Q_list = list(map(lambda x: sorted(x), Q_list))        

        for quorum in Q_list:

            logger.info("Quorum: Attempting Quorum = %s on valid history" % quorum) 

            if not isconsistentCheckpointStatements(quorum):
                logger.info("Quorum: doesn't have consistent checkpoints in quorum %s" % quorum)
                continue    
            logger.info("Quorum: Checkpoints are consistent") 

            hist = []
            for rid in quorum:
                hist.append(valid_history[rid])

            if not isValidQuorum(hist):
                logger.info("Quorum: not a valid quorum %s" % quorum)
                continue  
            
            logger.info("Quorum: Quorum is valid") 
            
            longest_history_replica = quorum[0]
            self.caught_up_statement = {}            
            for rid in quorum:                
                send(('catch_up', valid_history[longest_history_replica]), to=replicas[rid])     
                
            if(await(len(self.caught_up_statement) == len(quorum))):                
                pass
            elif timeout(self.default_timeout):    
                continue
            logger.info("Quorum: received all/some caught_up responses")       

            if not isValidCaughtUpStateHash(self.latest_config.public_keys):
                logger.info("Quorum: Caught Up State is not valid")
                continue

            logger.info("Quorum: Get running state from replica")

            clk = logical_clock()

            send(('get_running_state'), to= replicas[longest_history_replica])                        
            if(await(some(received(('running_state', slot_number, client_requests, running_state, last_rIndex), clk=rclk), has= (rclk > clk)))):
                logger.info("Quorum: Running state received %s" % running_state)
                pass
            elif timeout(self.default_timeout):
                logger.info('Quorum: Timed out on waiting for running state, Attempting new quorum')
                continue               
            

            if(not isvalidRunningState(running_state, self.caught_up_statement[longest_history_replica])):
                logger.info("Quorum: Quorum:State hash is not consistent with Running state, Attempting new quorum")
                continue                    
            logger.info('Quorum: Running state is valid with result hash')

            logger.info('Quorum: cleaning up old replicas')    
            for replica in replicas:
                send(('replica_force_shutdown'), to=replica)

            checkpointed_slot = self.last_checkpointed_slots[longest_history_replica]
            checkpointStatement = self.checkpointStatements[longest_history_replica]
            logger.info('Quorum: starting with checkpointed_slot %d checkpointedstatement %s' %(checkpointed_slot,checkpointStatement))
            configure(checkpointed_slot, checkpointStatement, slot_number, client_requests, running_state, last_rIndex)
            self.systemState = 'Normal'  
            return 
        
        logger.info('Quorum: Quorum is not possible, system compromised')            


    def receive(msg=('wedged_response', rid, history, last_checkpointed_slot, checkpointStatement), from_=p):
        self.order_proof_history[rid] = history
        self.last_checkpointed_slots[rid] = last_checkpointed_slot
        self.checkpointStatements[rid] = checkpointStatement

    def receive(msg=('caught_up', rid, state_hash), from_=p):
        self.caught_up_statement[rid] = state_hash

    def filter_invalid_order_proof_history(histories):
        rids_for_deletion = []
        for rid in histories:
            history = histories[rid]            
            for order_proof in history:
                if not isvalidOrderProof(order_proof[0].slot_number, order_proof[0].operation, order_proof, self.latest_config.public_keys):
                    logger.info('Removing rid = %d from quorum selection for having invalid order proof history' %rid)
                    rids_for_deletion.append(rid)                    
                    break
        for rid in rids_for_deletion:
            del histories[rid]

    def isPrefix(prefix, proof):
        for i in range(len(prefix)):
            if(prefix[i] != proof[i]):
                return False
        return True        

    def isValidQuorum(hist):        
        n = len(hist)      #length of quorum
        m = len(hist[n-1]) #length of shortest history
        for i in range(m):
            longest_proof = hist[n-1][i]     
            for j in range(n-1):
                if ((len(hist[j]) <=  i) or (not isPrefix(hist[j][i], longest_proof))):
                    return False
        return True            

    def isValidCaughtUpStateHash(public_keys_param):
        rid_init = None
        for rid in self.caught_up_statement:
            if rid_init is None:
                rid_init = rid
                continue

            if self.caught_up_statement[rid].ending_slot != self.caught_up_statement[rid_init].ending_slot:
                logger.info('Quorum: Last catch_up final slots for replicas dont match')
                return False

            if self.caught_up_statement[rid].running_state_hash != self.caught_up_statement[rid_init].running_state_hash:
                logger.info('Quorum: Last catch_up state hash for replicas dont match')
                return False

            try:
                public_keys_param[rid].verify(self.caught_up_statement[rid].signature)
            except Exception:
                logger.debug("Caught_up_statement number = %d is tampered" % i)
                return False  
                
        return True

    def isvalidRunningState(running_state, caught_up_statement):
        if caught_up_statement is None or running_state is None:
            logger.info('Quorum: Running state is None')
            return False

        state_hash = HASHER(str(running_state).encode(encoding='UTF-8'), encoder=nacl.encoding.HexEncoder)
        if not sodium_memcmp(caught_up_statement.running_state_hash, state_hash):
            logger.info('Quorum: Running state does not match the hash sent before')
            return False

        return True

    def isconsistentCheckpointStatements(quorum):
        rid_init = None
        for rid in quorum:
            if rid_init is None:
                rid_init = rid
                continue

            if self.last_checkpointed_slots[rid] != self.last_checkpointed_slots[rid_init]:
                logger.info('Quorum: Last Checkpointed slots for replicas dont match')
                return False

            if self.checkpointStatements[rid] != self.checkpointStatements[rid_init]:
                logger.info('Quorum: CheckpointStatements for replicas dont match')
                return False

        return True
        



    def configure(checkpointed_slot = -1, checkpointStatement = None, slot_number = -1, client_requests = {}, dictionary = {}, last_rIndex = {}):        

        logger.info("CONFIG : Creating new CONFIGURATION = %d", len(self.configs))        

        config = Config()        

        #client key
        clientSigningKey = nacl.signing.SigningKey.generate()                                
        config.client_private_key = clientSigningKey
        config.client_public_key = clientSigningKey.verify_key
        
        # initializing replicas
        config.replicas = []
        config.config_id = len(self.configs)
        for i in range(2*t + 1):
            replica = new(Replica, num=1, at=host_replica.get(str(i), "default"))                                    
            signingKey = nacl.signing.SigningKey.generate()                                
            config.private_keys.append(signingKey)
            config.public_keys.append(signingKey.verify_key)   
            config.replicas.append(replica)                

        
        config.head = config.replicas[0]
        config.tail = config.replicas[len(config.replicas) - 1]                        

        failure_cases = failures.get(str(config.config_id), {})
        logger.info("CONFIG : Creating replicas for configuration = %d" % config.config_id)
        for i in range(2*t + 1):
            setup(config.replicas[i], (head_timeout, nonhead_timeout, i, config.config_id, checkpointed_slot, checkpointStatement, slot_number, client_requests, dictionary,
                self, config.replicas, config.private_keys[i], config.public_keys, failure_cases.get(str(i), []), checkpoint_trigger, config.client_public_key))                        
            start(config.replicas[i])                

        self.configs.append(config)
        self.latest_config = config        

        #send latest configuration to clients
        for cid in clients:
            
            result = None
            if last_rIndex.get(cid, None) is not None:               
                send(('new_configuration', self.latest_config, last_rIndex[cid], None), to=clients[cid])
            else:
                send(('new_configuration', self.latest_config, -1, None), to=clients[cid])
        

    def receive(msg=('olympus_run'), from_=p): 
        configure()


    def receive(msg=("olympus_shutdown"), from_=p):
        logger.info("Request for shutdown")
        
        replicas = self.latest_config.replicas
        
        for replica in replicas:
            send(('replica_shutdown'), to=replica)

        replica_state = None

        if (await(len(setof(p, received(('replica_shut', replica_state), from_=p))) == len(replicas))):
            
            logger.info("Replicas are shut")

            time.sleep(0.1)

            replica_states = setof(replica_state, received(('replica_shut', replica_state), from_=p))                            

            deserialized_states = []
            for replica_state in replica_states:
                replica_state = json.loads(replica_state)
                deserialized_states.append(replica_state)
            
            send(('olympus_shut', json.dumps(deserialized_states)), to=p)

        elif timeout(self.default_timeout):
            logger.info("Timeout for Replicas shutdown")
            for replica in replicas:
                send(('replica_force_shutdown'), to=replica)             
            
        self.on = False


    def receive(msg=("olympus_force_shutdown"), from_=p):        
        logger.info("Force Shut")
        self.on = False
        logging.shutdown()
        os._exit(-1)   

