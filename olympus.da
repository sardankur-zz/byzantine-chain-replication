import json
import nacl.signing
import time
import os

get_logger = import_da("app_logging").get_logger
Replica = import_da("replica").Replica
common = import_da("common")
Config = common.Config

logger = get_logger("OLYMPUS")

class Olympus(process):

    def setup(head_timeout: int, nonhead_timeout: int, t: int, failures, host_replica):
    
        self.on = True
        self.systemState = 'Normal' 
        self.wait_T = 0.5
        self.configs = []
        self.default_timeout = 3
        self.order_proof_history = {}
        logger.info("Setup Completed")


    # receivers
    def run():
        logger.info("Running")
        await(self.on == False)        
        logger.info("Terminated")    


    def receive(msg=('latest_configuration_request', cid), from_=p):
        logger.info("Request for latest configuration from cid = %d" % cid)        
        if (self.systemState == 'Reconfiguring'):            
            send(('latest_configuration_response', None), to=p)
        else:
            send(('latest_configuration_response', self.configs[len(self.configs) - 1]), to=p)

    def receive(msg=('reconfigure_client_request', result_proof), from_=p):
        pass

    

    def receive(msg=('reconfigure'), from_=p):
        logger.info("Received Reconfigure Request")
        
        if self.systemState != 'Reconfiguring': 
            self.systemState = 'Reconfiguring'
            self.order_proof_history = {}

            replicas = self.configs[len(self.configs) - 1].replicas
            
            clk = logical_clock()

            logger.info("Sending wedge requests to all replicas")
            for replica in replicas:
                send(('wedge_request'), to=replica)

            logger.info("Awaiting wedged responses from all replicas")

            if(await(len(self.order_proof_history) == len(replicas))):
                pass
            elif timeout(self.wait_T):    
                pass
            
            logger.info("Received wedged response from %d replicas" % len(self.order_proof_history))              

            self.systemState = 'Normal'

    def receive(msg=('wedged_response', rid, history), from_=p):
        self.order_proof_history[rid] = history

    
    def reconfigure():
        config = Config()

        failure_cases = failures.get(str(0), {})
        
        # initializing replicas
        config.replicas = []
        for i in range(2*t + 1):
            replica = new(Replica, num=1, at=host_replica.get(str(i), "default"))                                    
            signingKey = nacl.signing.SigningKey.generate()                                
            config.private_keys.append(signingKey)
            config.public_keys.append(signingKey.verify_key)   
            config.replicas.append(replica)        
        
        config.head = config.replicas[0]
        config.tail = config.replicas[len(config.replicas) - 1]                

        time.sleep(0.2)

        for i in range(2*t + 1):
            setup(config.replicas[i], (head_timeout, nonhead_timeout, i, self, config.replicas, config.private_keys[i], config.public_keys, failure_cases.get(str(i), [])))                        
            start(config.replicas[i])                

        self.configs.append(config)


    def receive(msg=('olympus_run',), from_=p): 
        reconfigure()


    def receive(msg=("olympus_shutdown",), from_=p):
        logger.info("Request for shutdown")
        
        replicas = self.configs[len(self.configs) - 1].replicas
        
        for replica in replicas:
            send(('replica_shutdown',), to=replica)

        replica_state = None

        if (await(len(setof(p, received(('replica_shut', replica_state), from_=p))) == len(replicas))):
            logger.info("Replicas are shut")
            
            replica_states = setof(replica_state, received(('replica_shut', replica_state), from_=p))        
            deserialized_states = []
            for replica_state in replica_states:
                replica_state = json.loads(replica_state)
                deserialized_states.append(replica_state)
            
            send(('olympus_shut', json.dumps(deserialized_states)), to=p)

        elif timeout(self.default_timeout):
            logger.info("Timeout from Replicas")
            for replica in replicas:
                send(('replica_force_shutdown',), to=replica)             
            
        self.on = False


    def receive(msg=("olympus_force_shutdown",), from_=p):        
        logger.info("Force Shut")
        self.on = False
        logging.shutdown()
        os._exit(-1)   

