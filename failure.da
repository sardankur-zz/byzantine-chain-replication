import logging
import time

common = import_da("common")

from common import *

class Failure():
    def __init__(self, failures):
        
        self.trackers = {
            "client_request" : {},
            "forwarded_request" : {},
            "shuttle" : {},
            "result_shuttle" : {},
            "wedge_request" : 0,
            "new_configuration" : 0,
            "checkpoint" : 0,
            "completed_checkpoint" : 0,
            "get_running_state" : 0,
            "catch_up" : 0
        }        
        self.failures = failures

    def incr(self, tracker, n = None):
        if isinstance(self.trackers[tracker], dict):            
            if self.trackers[tracker].get(str(n), None) is None:
                self.trackers[tracker][str(n)] = 1
            else:
                self.trackers[tracker][str(n)] = self.trackers[tracker][str(n)] + 1        
        else:
            self.trackers[tracker] = self.trackers[tracker] + 1        

    def get(self, tracker, n = None):
        if isinstance(self.trackers[tracker], dict):            
            return self.trackers[tracker].get(str(n), 0)
        else:
            return self.trackers[tracker]

    def set(self, tracker, n):
        self.trackers[tracker] = n
    
    def get_failure(self, triggers, operations, cid = None):
                
        if not isinstance(triggers, list):
            triggers = [triggers]        

        if not isinstance(operations, list):
            operations = [operations]            

        for failure in self.failures:
            for trigger in triggers:
                for operation in operations:
                    # failure list
                    # 0: trigger, 1: trigger args, 2: failure, 3: failure args                                        
                    if trigger == failure[0] and operation == failure[2] \
                        and \
                            ((len(failure[1]) == 1 and str(failure[1][0]) == str(self.get(trigger))) \
                            or \
                            (len(failure[1]) == 2 and str(failure[1][0]) == \
                                str(cid) and str(failure[1][1]) == str(self.get(trigger, cid)))) :                                                    
                        return failure  
        return None


    @staticmethod
    def change_operation():
        return OpArgs('get', 'x')

    @staticmethod
    def change_result():
        return 'OK'

    @staticmethod
    def extra_op(dictionary):
        dictionary['a'] = 'a'

    @staticmethod
    def crash():
        logging.shutdown()
        os._exit(-1)

    @staticmethod
    def truncate_history(history, n):
        return history[:n]

    @staticmethod
    def sleep(t):
        time.sleep(t)

    @staticmethod
    def invalidate_signature(statement):
        statement.signature = "abc"

    @staticmethod
    def print(failure):
        return "FAILURE : %s %s %s %s" % (failure[0], failure[1], failure[2], failure[3])


