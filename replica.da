import logging
import nacl.signing
import nacl.hash
import nacl.encoding

HASHER = nacl.hash.sha256
get_logger = import_da("app_logging").get_logger
common = import_da("common")
Failure = import_da("failure").Failure

OpArgs = common.OpArgs
OrderStatement = common.OrderStatement
ResultStatement = common.ResultStatement
Shuttle = common.Shuttle
ReverseShuttle = common.ReverseShuttle
Operation = common.Operation
Config = common.Config
ReplicaState = common.ReplicaState

logger = get_logger("REPLICA")

class Replica(process):
    

    def setup(rid: int, prevr: Replica, nextr: Replica, head: Replica, tail: Replica, private_key, public_keys, failures):
        self.on = True
        self.slot_number = 0
        self.dictionary = {}
        self.private_key = private_key
        self.public_keys = public_keys

        # tracking of message
        self.client_requests = {}
        self.client_forward_requests = {}
        self.shuttle_requests = {}
        self.result_shuttle_requests = {}

        # set logging
        formatter = logging.Formatter("%(asctime)s : %(levelname)s : %(name)s " + str(self.rid) + " : %(message)s")
        for handler in logger.handlers:
            handler.setFormatter(formatter)

        logger.info("Initialized")

    def run():
        logger.info("Running")
        await(self.on == False)
        logger.info("Terminated")


    def creatSignedOrderStatement(slot_number, opArgs):
        orderStatement = str(slot_number) + str(opArgs)
        orderStatement = orderStatement.encode(encoding='UTF-8')
        signature = private_key.sign(orderStatement)
        return OrderStatement(self.slot_number, opArgs, signature)


    def creatSignedResultStatement(opArgs, result):
        result_hash = HASHER(result.encode(encoding='UTF-8'), encoder=nacl.encoding.HexEncoder)
        resultStatement = str(opArgs).encode(encoding='UTF-8') + result_hash
        signature = private_key.sign(resultStatement)
        return ResultStatement(opArgs, result_hash, signature)


    def incr(tracker, cid):
        if tracker.get(str(cid), None) is None:
           tracker[str(cid)] = 1
        else:
            tracker[str(cid)] = tracker[str(cid)] + 1


    def get(tracker, cid):
        return tracker.get(str(cid), 0)


    def isOrderProofValid(slot_number, opArgs, order_proof):
        i = 0
        for orderStatement in order_proof:
            if (orderStatement.slot_number != slot_number or orderStatement.operation != opArgs):
                return False
            else:
                try:
                    self.public_keys[i].verify(orderStatement.signature)
                except Exception:
                    logger.debug("Order Statement number = %d is not valid" % i)
                    return False
            i = i + 1
        return True


    def receive(msg=('client_request', opArgs, cid, requestIndex), from_=p):
        logger.info("Client request from cid = %s requestId = %d received with op args %s"
                    % (str(cid), requestIndex, opArgs))

        self.slot_number = self.slot_number + 1;

        # change opArgs if failure case demands
        failure = Failure.get_failure(failures, 'client_request', self.get(self.client_requests, cid), cid, 'change_operation')
        if(len(failure) > 0):
            opArgs = Failure.change_operation()

        shuttle = Shuttle(self.slot_number, opArgs, p, cid, requestIndex)

        result = Operation.do_op(dictionary, opArgs)

        # change result if applicable
        failure = Failure.get_failure(failures, 'client_request', self.get(self.client_requests, cid), cid, 'change_result')
        if (len(failure) > 0):
            result = Failure.change_result()

        orderStatement = creatSignedOrderStatement(self.slot_number, opArgs)
        shuttle.order_proof.append(orderStatement)

        resultStatement = creatSignedResultStatement(opArgs, result)
        shuttle.result_proof.append(resultStatement)

        # change opArgs if failure case demands
        failure = Failure.get_failure(failures, 'client_request', self.get(self.client_requests, cid), cid, 'drop_result_stmt')
        if (len(failure) > 0):
            shuttle.result_proof[0] = None

        logger.info("Shuttle Started")
        send(('shuttle', shuttle), to=nextr)

        self.incr(self.client_requests, cid)


    def receive(msg=('shuttle', shuttle), from_=p):
        logger.info("Shuttle Received")

        if not isOrderProofValid(shuttle.slot_number, shuttle.opArgs, shuttle.order_proof):
            logger.critical("Order Proof is not valid")

        # change opArgs if failure case demands
        failure = Failure.get_failure(failures, 'shuttle', self.get(self.shuttle_requests, shuttle.cid), shuttle.cid,
                                      'change_operation')
        if (len(failure) > 0):
            shuttle.opArgs = Failure.change_operation()

        self.slot_number = self.slot_number + 1;
        result = Operation.do_op(dictionary, shuttle.opArgs)

        # change result if applicable
        failure = Failure.get_failure(failures, 'shuttle', self.get(self.shuttle_requests, shuttle.cid), shuttle.cid,
                                      'change_result')
        if (len(failure) > 0):
            result = Failure.change_result()

        orderStatement = creatSignedOrderStatement(self.slot_number, shuttle.opArgs)
        shuttle.order_proof.append(orderStatement)

        resultStatement = creatSignedResultStatement(shuttle.opArgs, result)
        shuttle.result_proof.append(resultStatement)

        # change opArgs if failure case demands
        failure = Failure.get_failure(failures, 'shuttle', self.get(self.shuttle_requests, shuttle.cid), shuttle.cid,
                                      'drop_result_stmt')
        if (len(failure) > 0):
            shuttle.result_proof[0] = None

        if (nextr):
            logger.info("Shuttle Forwarded")
            send(('shuttle', shuttle), to=nextr)
        else:
            logger.info("Client Response sent to cid = %d" % shuttle.cid)
            send(('client_response', result, shuttle.result_proof, shuttle.requestIndex), to=shuttle.client)
            logger.info("Reverse Shuttle Started")
            reverseShuttle = ReverseShuttle(shuttle)
            send(('reverse_shuttle', reverseShuttle), to=prevr)

        self.incr(self.shuttle_requests, shuttle.cid)


    def receive(msg=('reverse_shuttle', reverseShuttle), from_=p):
        logger.info("Reverse Shuttle Received")
        # cache the result proof
        if (prevr):
            logger.info("Reverse Shuttle Forwarded")

            # change opArgs if failure case demands
            failure = Failure.get_failure(failures, 'result_shuttle', self.get(self.result_shuttle_requests, reverseShuttle.cid),
                                          reverseShuttle.cid, 'drop_result_stmt')
            if (len(failure) > 0):
                reverseShuttle.result_proof[0] = None

            send(('reverse_shuttle', reverseShuttle), to=prevr)

        self.incr(self.result_shuttle_requests, reverseShuttle.cid)


    def receive(msg=('shutdown',), from_=p):
        logger.info("Request for shutdown")
        send(('shut', str(ReplicaState(self.rid, self.dictionary))), to=p)
        self.on = False
