from nacl.bindings.utils import sodium_memcmp
import logging
import nacl.signing
import nacl.hash
import nacl.encoding
import time
import pylru
import os
import copy


HASHER = nacl.hash.sha256
app_logging = import_da("app_logging")
failure = import_da("failure")
common = import_da("common")
utils = import_da("utils")

from common import *
from utils import *
from failure import *

logger = app_logging.get_logger("REPLICA")

class Replica(process):
    
    def setup(head_timeout: int, nonhead_timeout: int, rid: int, config_id: int, checkpointed_slot: int, 
              checkpointStatement, slot_number: int, client_requests, dictionary,
              olympus, replicas, private_key, public_keys, failures, checkpointing_trigger, client_public_key):
        self.on = True
        self.state = 'Normal'                
        self.cacheSize = 10000        

        self.history = []

        self.resultShuttleCache = pylru.lrucache(self.cacheSize)
        self.retransmitCache = pylru.lrucache(self.cacheSize)
        self.requestCache = pylru.lrucache(self.cacheSize)

        self.rnum = len(replicas)
        self.t = int((self.rnum - 1)/2)
        self.nextr = replicas[rid + 1] if (rid < rnum-1) else None
        self.prevr = replicas[rid - 1] if (rid > 0 ) else None
        self.head  = replicas[0]

        # failure handling
        self.failure_handler = Failure(failures)     
        self.failure_handler.set('new_configuration', config_id - 1)   

        # set logging
        formatter = logging.Formatter("%(asctime)s : %(levelname)5s : %(name)6s " + str(self.rid) + " : %(message)s")
        app_logging.set_formatter(logger, formatter)        

        logger.info("Setup Completed")

    def run():
        logger.info("Running")        

        crashOrSleep('new_configuration')

        await(self.on == False)
        logger.info("Terminated")    


    def crashOrSleep(trigger, cid=-1):            

        failure = self.failure_handler.get_failure(trigger, 'crash', cid)
        if failure is not None:
            logger.info(self.failure_handler.print(failure))
            self.failure_handler.incr(trigger, cid)
            app_logging.flush(logger)        
            os._exit(-1)            

        failure = self.failure_handler.get_failure(trigger, 'sleep', cid)
        if failure is not None:
            logger.info(self.failure_handler.print(failure))
            time.sleep(int(failure[3][0])) 


    def receive(msg=('wedge_request'), from_=p):
        logger.info("Received Wedge Request")         

        failure = self.failure_handler.get_failure('wedge_request', 'drop')        
        if failure is not None:
            self.failure_handler.incr('wedge_request')
            logger.info(self.failure_handler.print(failure))
            return                

        crashOrSleep('wedge_request')

        failure = self.failure_handler.get_failure('wedge_request', 'truncate_history')        
        if failure is not None:            
            logger.info(self.failure_handler.print(failure))
            self.history = self.history[: len(self.history) -int(failure[3][0])]                

        self.failure_handler.incr('wedge_request')

        self.state = 'Immutable' 
        send(('wedged_response', self.rid, self.history, self.checkpointed_slot, self.checkpointStatement), to=olympus)


    def receive(msg=('catch_up', longest_history), from_=p):        
        logger.info("Received Catch_Up Request")  

        failure = self.failure_handler.get_failure('catch_up', 'drop')        
        if failure is not None:
            self.failure_handler.incr('catch_up')
            logger.info(self.failure_handler.print(failure))
            return        

        crashOrSleep('catch_up')

        self.failure_handler.incr('catch_up')

        copy_state = copy.deepcopy(self.dictionary)
        temp_slot_number = self.slot_number        

        for order_proof in longest_history:            
            orderStatement = order_proof[0]            
            if(orderStatement.slot_number > self.slot_number):
                Operation.do_op(copy_state, orderStatement.operation)
                temp_slot_number = orderStatement.slot_number    

        caught_up_checkpoint_statement = getcheckpointStatment(temp_slot_number, str(copy_state), self.private_key)      
                
        send(('caught_up', rid, caught_up_checkpoint_statement), to=olympus) 



    def receive(msg=('get_running_state'), from_=p):
        logger.info("Received Get_Running_State Request") 

        failure = self.failure_handler.get_failure('get_running_state', 'drop')        
        if failure is not None:
            self.failure_handler.incr('get_running_state')
            logger.info(self.failure_handler.print(failure))
            return        

        crashOrSleep('get_running_state')

        self.failure_handler.incr('get_running_state')

        last_rIndex = {}
        for clientId, requestIndex in self.requestCache:                
            if last_rIndex.get(clientId, - 1) < requestIndex:
                last_rIndex[clientId] = requestIndex
        
        send(('running_state', self.slot_number, self.client_requests, self.dictionary, last_rIndex), to=olympus)



    def receive(msg=('client_request', opArgs, cid, requestIndex, clientSignature), from_=p):
    
        logger.info("Client request for cid = %d requestIndex = %d received with op args %s" % (cid, requestIndex, opArgs))

        if self.state == 'Immutable':
            logger.info("Discarding request due to Immutable from cid = %d requestIndex = %d received with op args %s" % (cid, requestIndex, opArgs))
            return                

        # drop, crash or sleep
        failure = self.failure_handler.get_failure('client_request', 'drop', cid)        
        if failure is not None:
            logger.info(self.failure_handler.print(failure))
            self.failure_handler.incr('client_request', cid)
            return        

        crashOrSleep('client_request', cid)

        # increment slot, valid only for head, should be done before actual increment
        failure = self.failure_handler.get_failure('client_request', 'increment_slot', cid)
        if failure is not None:
            logger.info(self.failure_handler.print(failure))            
            self.slot_number += 1

        # Extra operation
        failure = self.failure_handler.get_failure('client_request', 'extra_op', cid)        
        if failure is not None:
            logger.info(self.failure_handler.print(failure))
            self.failure_handler.extra_op(self.dictionary);



    
        self.slot_number = self.slot_number + 1;

        # change opArgs if failure case demands                
        failure = self.failure_handler.get_failure('client_request', 'change_operation', cid)        
        if failure is not None:
            logger.info(self.failure_handler.print(failure))
            opArgs = self.failure_handler.change_operation()
            clientSignature = self.private_key.sign(str(opArgs).encode(encoding='UTF-8'))
        

        # store received operations in the cache
        requestCache[(cid, requestIndex)] = opArgs

        if((rid == 0 ) and (((self.slot_number + 1)%self.checkpointing_trigger) == 0)):
            logger.info('CHECKPTNG: Trigger Checkpointing at ending_slot = %d' %self.slot_number)

            # drop, crash or sleep
            failure = self.failure_handler.get_failure('checkpoint', 'drop')        
            if failure is not None:
                self.failure_handler.incr('checkpoint')
                logger.info(self.failure_handler.print(failure))
                return        

            crashOrSleep('checkpoint')

            self.failure_handler.incr('checkpoint')

            shuttle = Shuttle(self.slot_number, opArgs, p, cid, requestIndex, True, clientSignature)

        else:
            shuttle = Shuttle(self.slot_number, opArgs, p, cid, requestIndex, False, clientSignature)
 

        result = Operation.do_op(dictionary, opArgs)

        # change result if applicable        
        failure = self.failure_handler.get_failure('client_request', 'change_result', cid)        
        if failure is not None:
            logger.info(self.failure_handler.print(failure))
            result = self.failure_handler.change_result()

            
        orderStatement = creatSignedOrderStatement(self.slot_number, opArgs, private_key)

        # change order signature
        failure = self.failure_handler.get_failure('client_request', 'invalid_order_sig', cid)        
        if failure is not None:
            logger.info(self.failure_handler.print(failure))        
            self.failure_handler.invalidate_signature(orderStatement)

        shuttle.order_proof.append(orderStatement)
        self.history.append(shuttle.order_proof);


        resultStatement = creatSignedResultStatement(opArgs, result, private_key)        

        # change result signature
        failure = self.failure_handler.get_failure('client_request', 'invalid_result_sig', cid)        
        if failure is not None:
            logger.info(self.failure_handler.print(failure))
            self.failure_handler.invalidate_signature(resultStatement)        

        shuttle.result_proof.append(resultStatement)
        

        if shuttle.checkpoint_proof is not None:          
            logger.info('CHECKPTNG: Checkpoint proof added for ending_slot = %d' %self.slot_number)
            shuttle.checkpoint_proof.append(getcheckpointStatment(self.slot_number, str(self.dictionary), self.private_key))                            
        

        logger.info("Shuttle Started\t\t\t\t\t\t\t\tfor cid = %d and requestIndex=%d slot_number=%d" %(shuttle.cid, shuttle.requestIndex, shuttle.slot_number))
        send(('shuttle', shuttle), to=nextr)

        # increment trackers
        self.failure_handler.incr('client_request', cid)


    def receive(msg=('client_retransmit_request', opArgs, cid, requestIndex, clientSignature), from_=p) :
        
        logger.info("Received Retransmit request for cid = %d requestIndex = %d received with op args %s" % (cid, requestIndex, opArgs))

        if self.state == 'Immutable':
            logger.info("Discarding retransmit request due to Immutable for cid = %d requestIndex = %d received with op args %s" % (cid, requestIndex, opArgs))
            return      
        
        # send from result cache if available 
        resultShuttle = resultShuttleCache.get((cid, requestIndex), None);
        if resultShuttle is not None:
            if rid == 0:
                retransmitCache[(cid,requestIndex)] = 'Responded'

            logger.info("Replying to retransmit request from resultCache. cid = %d and requestIndex = %d" % (cid, requestIndex))   
            send(('client_retransmit_response', resultShuttle.result, resultShuttle.result_proof, resultShuttle.requestIndex, self.config_id), to=p)
            return 
        
        # otherwise forward request to head (even if this request is at head)       
        logger.info('Forwarding request to head for cid = %d requestIndex = %d' % (cid, requestIndex))
        send(('client_request_forward', opArgs, cid, requestIndex, rid, clientSignature), to=head)

        # start a timer if not head
        if(rid != 0):
            if(await(some(received(('head_responded_to_retransmit', cid1, requestIndex1)), has=(requestIndex1 == requestIndex and cid1 == cid)))):    
                
                logger.info('Head responded to retransmit request for cid = %d requestIndex = %d' % (cid, requestIndex))
                resultShuttle = resultShuttleCache.get((cid, requestIndex), None);

                if resultShuttle is not None: # this can still have result as none (unlikely), in that case the replica should reconfigure
                    logger.info("Replying to retransmit request from cid = %d and requestIndex = %d" % (cid, requestIndex))
                    send(('client_retransmit_response', resultShuttle.result, resultShuttle.result_proof, resultShuttle.requestIndex, self.config_id), to=p)
                else:
                    logger.error('Reconfigure: client_retransmit_request empty cache on confirmation receipt cid = %d and requestIndex = %d' % (cid, requestIndex))
                    send(('reconfigure', config_id), to=olympus)
            elif timeout(nonhead_timeout):
                logger.error('Reconfigure: Client_request_forward timeout cid = %d and requestIndex = %d' % (cid, requestIndex))
                send(('reconfigure', config_id), to=olympus)
                

    # Only For Head 
    def receive(msg=('client_request_forward', opArgs, cid, requestIndex, sourceRid, clientSignature), from_=p):
        
        logger.info("Received Forwarded request for cid = %d requestIndex = %d from rid = %d" % (cid, requestIndex, sourceRid))

        if self.state == 'Immutable':
            logger.info("Discarding forwarded request due to Immutable for cid = %d requestIndex = %d from rid = %d" % (cid, requestIndex, sourceRid))
            return      

        # drop, crash or sleep
        failure = self.failure_handler.get_failure('forwarded_request', 'drop', cid)
        if failure is not None:
            self.failure_handler.incr('forwarded_request', cid)
            logger.info(self.failure_handler.print(failure))
            return

        crashOrSleep('forwarded_request', cid)


        #if this is first forwarded request received at the head
        if retransmitCache.get((cid, requestIndex), None) is None:
            retransmitCache[(cid, requestIndex)] = 'inProcess'
            
            logger.info("Processing Forwarded request for cid = %d requestIndex = %d from rid = %d" % (cid, requestIndex, sourceRid))

            # send from result cache if available 
            resultShuttle = resultShuttleCache.get((cid, requestIndex), None);
            if resultShuttle is not None:

                # change result if applicable                
                failure = self.failure_handler.get_failure('forwarded_request', 'change_result', cid)        
                if failure is not None:
                    logger.info(self.failure_handler.print(failure))
                    resultShuttle.result = self.failure_handler.change_result()                


                # change opArgs if failure case demands
                failure = self.failure_handler.get_failure('forwarded_request', 'drop_result_stmt', resultShuttle.cid)        
                if failure is not None:
                    logger.info(self.failure_handler.print(failure))
                    resultShuttle.result_proof[0] = None                             


                logger.info("Replying to retransmit request from cid = %d and requestIndex = %d from resultCache" % (cid, requestIndex))
                send(('client_retransmit_response', resultShuttle.result, resultShuttle.result_proof, resultShuttle.requestIndex, self.config_id), to=resultShuttle.client)
                retransmitCache[(cid, requestIndex)] = 'Responded'

                for replica in replicas:
                    send(('head_responded_to_retransmit',cid, requestIndex), to=replica)
                return

            # wait for result shuttle to come back and then response
            elif (cid, requestIndex) in requestCache.keys():

                logger.info("Waiting for result shuttle to Reply to retransmit request from cid = %d and requestIndex = %d" % (cid, requestIndex))
                
                if await(some(received(('result_shuttle', resultShuttle)), has = resultShuttle.cid == cid and resultShuttle.requestIndex == requestIndex)):

                    time.sleep(0.1)

                    resultShuttle = resultShuttleCache.get((cid, requestIndex), None);

                    # change result if applicable                
                    failure = self.failure_handler.get_failure('forwarded_request', 'change_result', cid)        
                    if failure is not None:
                        logger.info(self.failure_handler.print(failure))
                        resultShuttle.result = self.failure_handler.change_result()                


                    # change opArgs if failure case demands
                    failure = self.failure_handler.get_failure('forwarded_request', 'drop_result_stmt', resultShuttle.cid)        
                    if failure is not None:
                        logger.info(self.failure_handler.print(failure))
                        resultShuttle.result_proof[0] = None             


                    logger.info("Head responding, waiting for result shuttle for the operation in queue for cid = %d and requestIndex = %d" % (cid, requestIndex))
                    send(('client_retransmit_response', resultShuttle.result, resultShuttle.result_proof, resultShuttle.requestIndex), to=resultShuttle.client)
                    retransmitCache[(cid, requestIndex)] = 'Responded'

                    for replica in replicas:
                        send(('head_responded_to_retransmit',cid, requestIndex), to=replica)                    

                elif timeout(head_timeout):
                    logger.error("Reconfigure: head timed out waiting for result shuttle for the operation in queue for cid = %d and requestIndex = %d" % (cid, requestIndex))
                    send(('reconfigure', config_id), to=olympus)
            
            # unrecognized operation
            else:
               
                logger.info("Creating shuttle for unrecognized retransmit request from cid = %d and requestIndex = %d" % (cid, requestIndex))
                
                self.slot_number = self.slot_number + 1;

                # store received operations in the cache
                requestCache[(cid, requestIndex)] = opArgs

                if( rid == 0 and ((self.slot_number + 1)%self.checkpointing_trigger) == 0 ):
                    logger.info('CHECKPTNG: Trigger Checkpointing at slot_number = %d' %self.slot_number)

                    # drop, crash or sleep
                    failure = self.failure_handler.get_failure('checkpoint', 'drop')        
                    if failure is not None:
                        self.failure_handler.incr('checkpoint')
                        logger.info(self.failure_handler.print(failure))
                        return        

                    crashOrSleep('checkpoint')

                    self.failure_handler.incr('checkpoint')

                    shuttle = Shuttle(self.slot_number, opArgs, p, cid, requestIndex, True, clientSignature)

                else:
                    shuttle = Shuttle(self.slot_number, opArgs, p, cid, requestIndex, False, clientSignature)

                result = Operation.do_op(dictionary, opArgs)

                orderStatement = creatSignedOrderStatement(self.slot_number, opArgs, private_key)
                shuttle.order_proof.append(orderStatement)
                self.history.append(shuttle.order_proof)

                resultStatement = creatSignedResultStatement(opArgs, result, private_key)

                shuttle.result_proof.append(resultStatement)

                if shuttle.checkpoint_proof is not None:
                    logger.info('CHECKPTNG: Checkpoint proof added for ending_slot = %d' %self.slot_number) 
                    shuttle.checkpoint_proof.append(getcheckpointStatment(self.slot_number, str(self.dictionary), self.private_key))


                logger.info("Shuttle Started\t\t\t\t\t\t\t\tfor cid = %d and requestIndex=%d slot_number=%d" %(shuttle.cid, shuttle.requestIndex,shuttle.slot_number))
                send(('shuttle', shuttle), to=nextr)                
                 
                logger.info("Waiting on result_shuttle on newly created request for cid = %d requestIndex = %d from rid = %d" % (cid, requestIndex, sourceRid))
                if await(some(received(('result_shuttle', resultShuttle)),has = resultShuttle.cid == cid and resultShuttle.requestIndex == requestIndex)):
                    time.sleep(0.1)
                    resultShuttle = resultShuttleCache.get((cid, requestIndex), None);
                    logger.info("result_shuttle on newly created request has arrived for cid = %d requestIndex = %d from rid = %d" % (cid, requestIndex, sourceRid))

                    send(('client_retransmit_response', resultShuttle.result, resultShuttle.result_proof, resultShuttle.requestIndex), to=resultShuttle.client)
                    
                    #mark retransmission complete though we don't use this value anymore
                    retransmitCache[(cid, requestIndex)] = 'Responded'

                    for replica in replicas:
                        send(('head_responded_to_retransmit',cid, requestIndex), to=replica)

                elif timeout(head_timeout):
                    logger.error("Reconfigure: head timeout waiting for result_shuttle on newly created request cid = %d requestIndex = %d from rid = %d" % (cid, requestIndex, sourceRid))
                    send(('reconfigure', config_id), to=olympus)

        # increment trackers
        self.failure_handler.incr('forwarded_request', cid)


    def receive(msg=('shuttle', shuttle), from_=p):
        logger.info("Shuttle Received\t\t\t\t\t\t\t\tfor cid = %d and requestIndex=%d slot_number=%d" %(shuttle.cid, shuttle.requestIndex,shuttle.slot_number))

        if self.state == 'Immutable':
            logger.info("Discarding shuttle due to Immutable for cid = %d and requestIndex=%d slot_number=%d" %(shuttle.cid, shuttle.requestIndex,shuttle.slot_number))
            return      

        # drop, crash or sleep
        failure = self.failure_handler.get_failure('shuttle', 'drop', shuttle.cid)
        if failure is not None:
            logger.info(self.failure_handler.print(failure))
            self.failure_handler.incr('shuttle', shuttle.cid)
            return

        crashOrSleep('shuttle', shuttle.cid)        

        # increment slot, valid only for head, should be done before actual increment
        failure = self.failure_handler.get_failure('shuttle', 'increment_slot', shuttle.cid)

        if failure is not None:
            logger.info(self.failure_handler.print(failure))
            self.slot_number += 1

        # Extra operation
        failure = self.failure_handler.get_failure('shuttle', 'extra_op', shuttle.cid)        
        if failure is not None:
            logger.info(self.failure_handler.print(failure))
            self.failure_handler.extra_op(self.dictionary);



        if not isvalidOrderProof(shuttle.slot_number, shuttle.opArgs, shuttle.order_proof, self.public_keys, shuttle.clientSignature, client_public_key):
            logger.error("Reconfigure: Order Proof is not valid cid = %d requestIndex = %d slot_number = %d" % (shuttle.cid, shuttle.requestIndex, shuttle.slot_number))
            send(('reconfigure', config_id), to=olympus)
            return


        # change opArgs if failure case demands        
        failure = self.failure_handler.get_failure('shuttle', 'change_operation', shuttle.cid)        
        if failure is not None:
            logger.info(self.failure_handler.print(failure))
            shuttle.opArgs = self.failure_handler.change_operation()       
            shuttle.clientSignature = self.private_key.sign(str(shuttle.opArgs).encode(encoding='UTF-8')) 

         
        # store received operations in the cache
        requestCache[(shuttle.cid, shuttle.requestIndex)] = shuttle.opArgs

        self.slot_number = self.slot_number + 1;
        result = Operation.do_op(dictionary, shuttle.opArgs)        

        # change result if applicable        
        failure = self.failure_handler.get_failure('shuttle', 'change_result', shuttle.cid)        
        if failure is not None:
            logger.info(self.failure_handler.print(failure))
            result = self.failure_handler.change_result()
        

        orderStatement = creatSignedOrderStatement(self.slot_number, shuttle.opArgs, private_key)

        # change order signature
        failure = self.failure_handler.get_failure('shuttle', 'invalid_order_sig', shuttle.cid)        
        if failure is not None:
            logger.info(self.failure_handler.print(failure))
            self.failure_handler.invalidate_signature(orderStatement)

        shuttle.order_proof.append(orderStatement)
        self.history.append(shuttle.order_proof)

        resultStatement = creatSignedResultStatement(shuttle.opArgs, result, private_key)        

        # change result signature
        failure = self.failure_handler.get_failure('shuttle', 'invalid_result_sig', shuttle.cid)        
        if failure is not None:
            logger.info(self.failure_handler.print(failure))
            self.failure_handler.invalidate_signature(resultStatement)

        shuttle.result_proof.append(resultStatement)        
        
        if shuttle.checkpoint_proof is not None:               

            # drop, crash or sleep
            failure = self.failure_handler.get_failure('checkpoint', 'drop')        
            if failure is not None:
                self.failure_handler.incr('checkpoint')
                logger.info(self.failure_handler.print(failure))
                return        

            crashOrSleep('checkpoint')            

            self.failure_handler.incr('checkpoint')

            if not isvalidCheckpointProof(shuttle.slot_number, str(self.dictionary), shuttle.checkpoint_proof, self.public_keys):
                logger.error("Reconfigure: Checkpoint Proof is not valid for ending_slot_number = %d" % (shuttle.slot_number))
                send(('reconfigure', config_id), to=olympus)
                return
         
            logger.info('CHECKPTNG: Checkpoint proof added for ending_slot = %d' %self.slot_number)
            shuttle.checkpoint_proof.append(getcheckpointStatment(self.slot_number, str(self.dictionary), self.private_key))



        if (nextr):
            logger.info("Shuttle Forwarded\t\t\t\t\t\t\t\tfor cid = %d and requestIndex=%d slot_number=%d" %(shuttle.cid, shuttle.requestIndex,shuttle.slot_number))
            send(('shuttle', shuttle), to=nextr)
        else:
            logger.info("Client Response sent to cid = %d" % shuttle.cid)
            send(('client_response', result, shuttle.result_proof, shuttle.requestIndex, self.config_id), to=shuttle.client)
            
            resultShuttle = ResultShuttle(shuttle, result)


            # drop, crash or sleep
            failure = self.failure_handler.get_failure('result_shuttle', 'drop', resultShuttle.cid)
            if failure is not None:
                self.failure_handler.incr('result_shuttle', resultShuttle.cid)
                logger.info(self.failure_handler.print(failure))
                return

            crashOrSleep('result_shuttle', resultShuttle.cid)


            if not isvalidResultProof(shuttle.opArgs, resultShuttle.result, resultShuttle.result_proof, self.public_keys):
                logger.error("Reconfigure: Result Proof is not valid for cid = %d requestIndex = %d" % (resultShuttle.cid, resultShuttle.requestIndex))
                send(('reconfigure', config_id), to=olympus)
                return

            if resultShuttle.checkpoint_proof is not None:                   

                # drop, crash or sleep
                failure = self.failure_handler.get_failure('completed_checkpoint', 'drop')        
                if failure is not None:
                    self.failure_handler.incr('completed_checkpoint')
                    logger.info(self.failure_handler.print(failure))
                    return        

                crashOrSleep('completed_checkpoint')                

                if not isconsistentCheckpointProof(resultShuttle.slot_number, resultShuttle.checkpoint_proof, self.public_keys):
                    logger.error("Reconfigure: Checkpoint Proof is not valid for ending_slot_number = %d" % (resultShuttle.slot_number))
                    send(('reconfigure', config_id), to=olympus)
                    return
                else:
                    logger.info("CHECKPTNG: Deleting first %d entries from the history" %(resultShuttle.slot_number - self.checkpointed_slot))
                    del self.history[:(resultShuttle.slot_number - self.checkpointed_slot)]
                    self.checkpointed_slot = resultShuttle.slot_number 
                    self.checkpointStatement = resultShuttle.checkpoint_proof[rnum-1]   

                    failure = self.failure_handler.get_failure('completed_checkpoint', 'drop_checkpt_stmts')        
                    if failure is not None:                        
                        logger.info(self.failure_handler.print(failure))
                        resultShuttle.checkpoint_proof = resultShuttle.checkpoint_proof[self.t+1:]                      
                        resultShuttle.checkpoint_proof.extend([CheckpointStatement(-1, '', '') for _ in range(self.rnum - self.t)])

                self.failure_handler.incr('completed_checkpoint')

            #store in the cache
            resultShuttleCache[(resultShuttle.cid, resultShuttle.requestIndex)] = resultShuttle

            failure = self.failure_handler.get_failure('result_shuttle', 'change_result', resultShuttle.cid)        
            if failure is not None:
                logger.info(self.failure_handler.print(failure))
                resultShuttle.result = self.failure_handler.change_result()            


            failure = self.failure_handler.get_failure('result_shuttle', 'drop_result_stmt', resultShuttle.cid)        
            if failure is not None:
                logger.info(self.failure_handler.print(failure))
                resultShuttle.result_proof[0] = None            


            logger.info("Result Shuttle Started\t\t\t\t\t\t\tfor cid = %d and requestIndex=%d slot_number=%d" %(resultShuttle.cid, resultShuttle.requestIndex,resultShuttle.slot_number))

            send(('result_shuttle', resultShuttle), to=prevr)

            # increment trackers
            self.failure_handler.incr('result_shuttle', resultShuttle.cid)

        
        # increment trackers
        self.failure_handler.incr('shuttle', shuttle.cid)




    def receive(msg=('result_shuttle', resultShuttle), from_=p):
        logger.info("Result Shuttle Received\t\t\t\t\t\t\tfor cid = %d and requestIndex=%d slot_number=%d" %(resultShuttle.cid, resultShuttle.requestIndex,resultShuttle.slot_number))

        if self.state == 'Immutable':
            logger.info("Discarding result shuttle due to Immutable for cid = %d and requestIndex=%d slot_number=%d" %(resultShuttle.cid, resultShuttle.requestIndex, resultShuttle.slot_number))
            return      

        # drop, crash or sleep
        failure = self.failure_handler.get_failure('result_shuttle', 'drop', resultShuttle.cid)
        if failure is not None:
            self.failure_handler.incr('result_shuttle', resultShuttle.cid)
            logger.info(self.failure_handler.print(failure))
            return

        crashOrSleep('result_shuttle', resultShuttle.cid)
        
        
        if not isvalidResultProof(resultShuttle.opArgs, resultShuttle.result, resultShuttle.result_proof, self.public_keys):
            logger.error("Reconfigure: Result Proof is not valid for cid = %d requestIndex = %d" % (resultShuttle.cid, resultShuttle.requestIndex))
            send(('reconfigure', config_id), to=olympus)
            return

        if resultShuttle.checkpoint_proof is not None:   

            # drop, crash or sleep
            failure = self.failure_handler.get_failure('completed_checkpoint', 'drop')        
            if failure is not None:
                self.failure_handler.incr('completed_checkpoint')
                logger.info(self.failure_handler.print(failure))
                return        

            crashOrSleep('completed_checkpoint')            

            if not isconsistentCheckpointProof(resultShuttle.slot_number, resultShuttle.checkpoint_proof, self.public_keys):
                logger.error("Reconfigure: Checkpoint Proof is not consistent for ending_slot_number = %d" % (resultShuttle.slot_number))
                send(('reconfigure', config_id), to=olympus)
                return    
            else:
                logger.info("CHECKPTNG: Deleting first %d entries from the history" %(resultShuttle.slot_number - self.checkpointed_slot))
                del self.history[:(resultShuttle.slot_number - self.checkpointed_slot)]
                self.checkpointed_slot = resultShuttle.slot_number
                self.checkpointStatement = resultShuttle.checkpoint_proof[rnum-1]  

                failure = self.failure_handler.get_failure('completed_checkpoint', 'drop_checkpt_stmts')        
                if failure is not None:                     
                    logger.info(self.failure_handler.print(failure))                    
                    resultShuttle.checkpoint_proof = resultShuttle.checkpoint_proof[self.t+1:]                      
                    resultShuttle.checkpoint_proof.extend([CheckpointStatement(-1, '', '') for _ in range(self.rnum - self.t)])

            self.failure_handler.incr('completed_checkpoint')

        #cache the result shuttle
        resultShuttleCache[(resultShuttle.cid, resultShuttle.requestIndex)] = resultShuttle

        
        # change result if applicable        
        failure = self.failure_handler.get_failure('result_shuttle', 'change_result', resultShuttle.cid)        
        if failure is not None:
            logger.info(self.failure_handler.print(failure))
            resultShuttle.result = self.failure_handler.change_result()        


        failure = self.failure_handler.get_failure('result_shuttle', 'drop_result_stmt', resultShuttle.cid)        
        if failure is not None:
            logger.info(self.failure_handler.print(failure))
            resultShuttle.result_proof[0] = None             


        if (prevr):
            logger.info("Result Shuttle Forwarded\t\t\t\t\t\t\tfor cid = %d and requestIndex=%d slot_number=%d" %(resultShuttle.cid, resultShuttle.requestIndex,resultShuttle.slot_number))

            send(('result_shuttle', resultShuttle), to=prevr)
        
        # increment trackers
        self.failure_handler.incr('result_shuttle', resultShuttle.cid)


    def receive(msg=('replica_shutdown'), from_=p):
        logger.info("Request for shutdown")            
        send(('replica_shut', str(ReplicaState(self.rid, self.dictionary))), to=p)
        self.on = False


    def receive(msg=('replica_force_shutdown'), from_=p):
        self.on = False
        logger.info("Force Shut")
        logging.shutdown()
        os._exit(-1)        
