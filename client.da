from enum import Enum
from nacl.bindings.utils import sodium_memcmp
import logging
import nacl.signing
import nacl.hash
import nacl.encoding

HASHER = nacl.hash.sha256
get_logger = import_da("app_logging").get_logger
common = import_da("common")
OpArgs = common.OpArgs

logger = get_logger("CLIENT")

class Client(process):

    def setup(cid: int, client_timeout: int, olympus):
        self.latest_config = None
        self.on = True
        self.workArgs = []
        self.requestIndex = 0
        self.main_thread = None

        formatter = logging.Formatter("%(asctime)s : %(levelname)s : %(name)s " + str(self.cid) + " : %(message)s")
        for handler in logger.handlers:
            handler.setFormatter(formatter)

        logger.info("setup Completed")

    
    def isvalidResultProof(opArgs, result, result_proof, public_keys):
        result_hash = HASHER(result.encode(encoding='UTF-8'), encoder=nacl.encoding.HexEncoder)
        i = 0

        for resultStatement in result_proof:
            if resultStatement is None:
                logger.debug("Result statement number = %d is missing" % i)
                return False   
            if opArgs != resultStatement.operation:
                logger.debug("opArgs for Result statement number = %d is not valid" % i)
                return False         
            if not sodium_memcmp(resultStatement.result_hash, result_hash):
                logger.debug("Result Hash for Result statement number = %d is not valid" % i)
                return False

            try:
                public_keys[i].verify(resultStatement.signature)
            except Exception:
                logger.debug("Result Statement number = %d is tempered" % i)
                return False
            i = i + 1

        return True 


    def run():
        logger.info("Running")
        await(self.on == False)
        send(('client_shut',), to=self.main_thread)
        logger.info("Terminated")


    def receive(msg=('client_workload', workload), from_=p):
        for work in workload:
            if(len(work) < 3):
                self.workArgs.append(OpArgs(work[0], work[1]))
            else:
                self.workArgs.append(OpArgs(work[0], work[1], work[2]))
        send(('client_workload_ack', cid), to=p)


    def receive(msg=('client_run',), from_=p):

        self.main_thread = p

        # get the permanent configuration (phase 2 limitation)
        clk = logical_clock()
        send(('latest_configuration_request', cid), to=olympus)
        await(some(received(('latest_configuration_response', config), clk=rclk), has=rclk > clk))
        self.latest_config = config

        # iterate over the workload

        logger.info("Executing %d requests" % len(workArgs))

        for requestIndex in range(len(self.workArgs)):
            logger.info("Sending request for opArgs = %s and requestIndex = %d" % (workArgs[requestIndex], requestIndex))
            send(('client_request', workArgs[requestIndex], cid, requestIndex), to=self.latest_config.head)

            if(await(some(received(('client_response', result, result_proof, rIndex)), has= rIndex==requestIndex))):
                if not isvalidResultProof(workArgs[requestIndex], result, result_proof, config.public_keys):
                    logger.error("Reconfigure: Result Proof is not valid for rIndex = %d" % rIndex)
                    break                    
                else:
                    logger.info("Response received for opArgs = %s and requestIndex %d" % (workArgs[requestIndex], requestIndex))   

            elif timeout(self.client_timeout):
                logger.info("Retransmiting request for opArgs = %s and requestIndex = %d" % (workArgs[requestIndex], requestIndex))
                send(('client_retransmit_request', workArgs[requestIndex], cid, requestIndex), to=self.latest_config.replicas)
                if(await(some(received(('client_retransmit_response', result, result_proof, rIndex)), has=rIndex == requestIndex))):
                    logger.info("Retransmit response received for opArgs = %s and requestIndex %d" % (workArgs[requestIndex], requestIndex))

                elif timeout(self.client_timeout):
                    logger.error("Reconfigure: Client_Retransmit_request timed out: Request number : %d " % requestIndex)
                    break

        self.on = False




