from enum import Enum
from nacl.bindings.utils import sodium_memcmp
import logging
import nacl.signing
import nacl.hash
import nacl.encoding
import time
from utils import *

HASHER = nacl.hash.sha256
get_logger = import_da("app_logging").get_logger
common = import_da("common")
OpArgs = common.OpArgs


logger = get_logger("CLIENT")

class Client(process):

    def setup(cid: int, client_timeout: int, olympus):
        self.latest_config = None
        self.on = True
        self.workArgs = []
        self.requestIndex = 0
        self.main_thread = None

        formatter = logging.Formatter("%(asctime)s : %(levelname)5s : %(name)6s  " + str(self.cid) + " : %(message)s")
        for handler in logger.handlers:            
            handler.setFormatter(formatter)

        logger.info("Setup Completed")

    def run():
        logger.info("Running")
        await(self.on == False)
        send(('client_shut'), to=self.main_thread)
        logger.info("Terminated")


    def receive(msg=('client_workload', workload), from_=p):
        for work in workload:
            if(len(work) < 3):
                self.workArgs.append(OpArgs(work[0], work[1]))
            else:
                self.workArgs.append(OpArgs(work[0], work[1], work[2]))
        send(('client_workload_ack', cid), to=p)

    
    def get_latest_configuration():
        clk = logical_clock()
        send(('latest_configuration_request', cid), to=olympus)
        await(some(received(('latest_configuration_response', config), clk=rclk), has=rclk > clk))
        return config    


    def execute_request(requestIndex, config):       
        
        # send client request
        logger.info("Sending request for opArgs = %s and requestIndex = %d" \
            % (workArgs[requestIndex], requestIndex))        
        send(('client_request', workArgs[requestIndex], cid, requestIndex), to=config.head)

        if(await(some(received(('client_response', result, result_proof, rIndex)), has= rIndex==requestIndex))):
            
            if not isvalidResultProof(workArgs[requestIndex], result, result_proof, config.public_keys):
                logger.error("Reconfigure: Result Proof is not valid for rIndex = %d" % rIndex)
                send(('reconfigure_client_request', result_proof, result), to=olympus)                                
                return 'Reconfigure'
            
            else:
                logger.info("Response received for opArgs = %s and requestIndex %d" \
                    % (workArgs[requestIndex], requestIndex))   
                return 'Success'

        elif timeout(self.client_timeout):
            
            logger.info("Retransmitting request for opArgs = %s and requestIndex = %d" \
                % (workArgs[requestIndex], requestIndex))
            for replica in config.replicas:
                send(('client_retransmit_request', workArgs[requestIndex], cid, requestIndex), to=replica)


            if(await(some(received(('client_retransmit_response', result, result_proof, rIndex)), has=rIndex == requestIndex))):
                if not isvalidResultProof(workArgs[requestIndex], result, result_proof, config.public_keys):
                    logger.error("Reconfigure: Result Proof is not valid for rIndex = %d" % rIndex)
                    send(('reconfigure_client_request', result_proof, result), to=olympus)
                    return 'Reconfigure'
                else :
                    logger.info("Retransmit response received for opArgs = %s and requestIndex %d" \
                        % (workArgs[requestIndex], requestIndex))
                    return 'Success'
                
            elif timeout(self.client_timeout):
                logger.error("Reconfigure: Client_Retransmit_request timed out: Request number : %d " % requestIndex)
                send(('reconfigure_client_request', None, None), to=olympus)
                return 'Reconfigure'


    def receive(msg=('olympus_client_response', result, result_proof, rIndex), from_=p):

        # Getting response from Olympus
        logger.info("Response received from Olympus for opArgs = %s and requestIndex %d" \
                    % (self.workArgs[rIndex], rIndex)) 


    def receive(msg=('client_run',), from_=p):

        self.main_thread = p            
        config = None

        logger.info("Executing %d request(s)    " % len(workArgs))

        requestIndex = 0
        while (requestIndex < len(self.workArgs)):

            while config is None:                                
                logger.info("Attempting to get Latest Configuration")

                # config should also specify the request number executed for each client
                config = get_latest_configuration()                        
                if config is not None:
                    logger.info("Latest configuration received")
                    break                    
                time.sleep(3)        

            return_value = execute_request(requestIndex, config)

            if return_value == 'Reconfigure':
                config = None

            requestIndex += 1

        self.on = False




