import logging

from enum import Enum
get_logger = import_da("app_logging").get_logger
common = import_da("common")
OpArgs = common.OpArgs

logger = get_logger("CLIENT")

class Client(process):

    def setup(cid: int, client_timeout: int, workload:list, olympus):
        self.latest_config = None
        self.on = True
        self.workArgs = []
        self.workIndex = 0

        formatter = logging.Formatter("%(asctime)s : %(levelname)s : %(name)s " + str(self.cid) + " : %(message)s")
        for handler in logger.handlers:
            handler.setFormatter(formatter)

        for work in workload:
            if(len(work) < 3):
                self.workArgs.append(OpArgs(work[0], work[1]))
            else:
                self.workArgs.append(OpArgs(work[0], work[1], work[2]))  

        logger.info("Initialized with Workload : %s" % (str(self.workArgs)))

    def run():
        logger.info("Running")
        for workIndex in range(len(self.workArgs)):
            send(('latest_configuration',), to=olympus)
            await(some(received(('latest_configuration', config)), has=config is not None))
            self.latest_config = config
            send(('client_request', workArgs[workIndex], cid), to=self.latest_config.head)
            if(await(some(received(('client_response', result, result_proof)), has=result is not None))):
                continue
            elif timeout(self.client_timeout): ###TODO: SEC TO MILISECOND timer
                # what to do?
                pass

        await(self.on == False)
        logger.info("Terminated")


    def receive(msg=("shutdown",), from_=p):
        logger.info("Request for shutdown")
        send(('shut',), to=p)
        self.on = False
