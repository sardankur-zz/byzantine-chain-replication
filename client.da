from enum import Enum
from nacl.bindings.utils import sodium_memcmp
import logging
import nacl.signing
import nacl.hash
import nacl.encoding
import time

HASHER = nacl.hash.sha256
app_logging = import_da("app_logging")
common = import_da("common")
utils = import_da("utils")

from common import *
from utils import *


logger = app_logging.get_logger("CLIENT")

class Client(process):

    def setup(cid: int, client_timeout: int, olympus, main_thread):
        self.latest_config = None
        self.on = True
        self.workArgs = []
        self.requestIndex = 0        

        formatter = logging.Formatter("%(asctime)s : %(levelname)5s : %(name)6s  " + str(self.cid) + " : %(message)s")
        app_logging.set_formatter(logger, formatter)        

        logger.info("Setup Completed")

    def run():
        logger.info("Running")
        await(self.on == False)                
        send(('client_shut'), to=self.main_thread)
        logger.info("Terminated")


    def receive(msg=('client_workload', workload), from_=p):
        for work in workload:
            if(len(work) < 3):
                self.workArgs.append(OpArgs(work[0], work[1]))
            else:
                self.workArgs.append(OpArgs(work[0], work[1], work[2]))
        send(('client_workload_ack', cid), to=p)

    
    def get_latest_configuration():
        clk = logical_clock()
        send(('latest_configuration_request', cid), to=olympus)
        await(some(received(('latest_configuration_response', config), clk=rclk), has=rclk > clk))
        return config    


    def execute_request(requestIndex, config):       
        
        # send client request
        logger.info("Sending request for opArgs = %s and requestIndex = %d" \
            % (workArgs[requestIndex], requestIndex))        
        send(('client_request', workArgs[requestIndex], cid, requestIndex), to=config.head)

        if(await(some(received(('client_response', result, result_proof, rIndex, config_id)), 
                has= (rIndex==requestIndex and config_id == config.config_id)))):            
            if not isvalidResultProof(workArgs[requestIndex], result, result_proof, config.public_keys):
                logger.error("Reconfigure: Result Proof is not valid for rIndex = %d" % rIndex)
                send(('reconfigure_client_request', result_proof, result), to=olympus)                                
                return 'Reconfigure'
            
            else:
                logger.info("Response received for opArgs = %s and requestIndex %d" \
                    % (workArgs[requestIndex], requestIndex))   
                return 'Success'            

        elif timeout(self.client_timeout):

            if (config.config_id < self.latest_config.config_id):
                return 'Reconfigure'                
            
            logger.info("Retransmitting request for opArgs = %s and requestIndex = %d" \
                % (workArgs[requestIndex], requestIndex))
            for replica in config.replicas:
                send(('client_retransmit_request', workArgs[requestIndex], cid, requestIndex), to=replica)


            if(await(some(received(('client_retransmit_response', result, result_proof, rIndex, config_id)), 
                    has= (rIndex==requestIndex and config_id == config.config_id)))):
                if not isvalidResultProof(workArgs[requestIndex], result, result_proof, config.public_keys):
                    logger.error("Reconfigure: Result Proof is not valid for rIndex = %d" % rIndex)
                    send(('reconfigure_client_request', result_proof, result), to=olympus)
                    return 'Reconfigure'
                else :
                    logger.info("Retransmit response received for opArgs = %s and requestIndex %d" \
                        % (workArgs[requestIndex], requestIndex))
                    return 'Success'                    
                
            elif timeout(self.client_timeout):
                if (config.config_id < self.latest_config.config_id):
                    return 'Reconfigure'                

                logger.error("Reconfigure: Client_Retransmit_request timed out: Request number : %d " % requestIndex)
                send(('reconfigure_client_request', None, None), to=olympus)
                return 'Reconfigure'


    def receive(msg=('new_configuration', config, lastRequestIndex, result), from_=p):               
        
        self.latest_config = config

        if result is not None:
            logger.info("Response received from Olympus for opArgs = %s and requestIndex %d" \
                    % (self.workArgs[lastRequestIndex], lastRequestIndex)) 
            
        # Not necessary to do result proof validation because it is coming from olympus         
        self.requestIndex = lastRequestIndex + 1           


        while(config.config_id == self.latest_config.config_id and self.requestIndex < len(self.workArgs)) :
            return_value = execute_request(self.requestIndex, config)
            if return_value == 'Reconfigure':
                return
            self.requestIndex += 1

        # All requests have been executed
        if self.requestIndex == len(self.workArgs):                         
            self.on = False
            return




