from nacl.bindings.utils import sodium_memcmp
import logging
import nacl.signing
import nacl.hash
import nacl.encoding
import time
import pylru

HASHER = nacl.hash.sha256
app_logging = import_da("app_logging")
common = import_da("common")

from common import *

logger = app_logging.get_logger("UTIL")
formatter = logging.Formatter("%(asctime)s : %(levelname)5s : %(name)9s : %(message)s")
app_logging.set_formatter(logger, formatter)        

def creatSignedOrderStatement(slot_number, opArgs, private_key_param):
    orderStatement = str(slot_number) + str(opArgs)
    orderStatement = orderStatement.encode(encoding='UTF-8')
    signature = private_key_param.sign(orderStatement)
    return OrderStatement(slot_number, opArgs, signature)


def creatSignedResultStatement(opArgs, result, private_key_param):
    result_hash = HASHER(result.encode(encoding='UTF-8'), encoder=nacl.encoding.HexEncoder)
    resultStatement = str(opArgs).encode(encoding='UTF-8') + result_hash
    signature = private_key_param.sign(resultStatement)
    return ResultStatement(opArgs, result_hash, signature)
    
def getcheckpointStatment(slot_number, dictionary_str, private_key_param):
    state_hash = HASHER(dictionary_str.encode(encoding='UTF-8'), encoder=nacl.encoding.HexEncoder)
    runningStateStatement = str(slot_number).encode(encoding='UTF-8') + state_hash
    signature = private_key_param.sign(runningStateStatement)
    return CheckpointStatement(slot_number, state_hash, signature)

def isvalidResultProof(opArgs, result, result_proof, public_keys_param):
    result_hash = HASHER(result.encode(encoding='UTF-8'), encoder=nacl.encoding.HexEncoder)
    i = 0

    for resultStatement in result_proof:
        if resultStatement is None:
            logger.debug("Result statement number = %d is missing" % i)
            return False   
        if opArgs != resultStatement.operation:
            logger.debug("opArgs for Result statement number = %d is not valid" % i)
            return False         
        if not sodium_memcmp(resultStatement.result_hash, result_hash):
            logger.debug("Result Hash for Result statement number = %d is not valid" % i)
            return False

        try:
            public_keys_param[i].verify(resultStatement.signature)
        except Exception:
            logger.debug("Result Statement number = %d is tampered" % i)
            return False
        i = i + 1

    return True 

def isvalidOrderProof(slot_number, opArgs, order_proof, public_keys_param, client_signature = None, client_public_key = None):
    i = 0

    if client_signature is not None:
        try:
            client_public_key.verify(client_signature)
        except Exception:
            logger.debug("Operation is tampered")
            return False 

    for orderStatement in order_proof:
        if orderStatement is None:
            logger.debug("Order Statement number = %d is missing" % i)
            return False
        if orderStatement.slot_number != slot_number:
            logger.debug("Slot number for Order Statement number = %d is not correct" % i)
            return False
        if orderStatement.operation != opArgs:
            logger.debug("opArgs for Order Statement number = %d is not valid" % i)
            return False
        try:
            public_keys_param[i].verify(orderStatement.signature)
        except Exception:
            logger.debug("Order Statement number = %d is tampered" % i)
            return False   
        i = i + 1
        
    return True

def isvalidCheckpointProof(slot_number, dictionary_str, proof, public_keys_param):
    local_state_hash = HASHER(dictionary_str.encode(encoding='UTF-8'), encoder=nacl.encoding.HexEncoder)
    i = 0
    for checkpointStatement in proof:
        if checkpointStatement is None:
            logger.debug("Checkpoint Statement number = %d is missing" % i)
            return False
        if checkpointStatement.ending_slot != slot_number:
            logger.debug("Slot number for Checkpoint Statement number = %d is not correct" % i)
            return False
        if not sodium_memcmp(checkpointStatement.running_state_hash, local_state_hash):
            logger.debug("Running_state for Checkpoint Statement number = %d is not valid" % i)
            return False
        try:
            public_keys_param[i].verify(checkpointStatement.signature)
        except Exception:
            logger.debug("Checkpoint Statement number = %d is tempered" % i)
            return False   
        i = i + 1

    return True    

def isconsistentCheckpointProof(slot_number, proof, public_keys_param):
    i = 0
    for checkpointStatement in proof:
        if checkpointStatement is None:
            logger.debug("Checkpoint Statement number = %d is missing" % i)
            return False
        if checkpointStatement.ending_slot != slot_number:
            logger.debug("Slot number for Checkpoint Statement number = %d is not correct" % i)
            return False
        if not sodium_memcmp(checkpointStatement.running_state_hash, proof[0].running_state_hash):
            logger.debug("Running_state_hash for Checkpoint Statement number = %d is not consistent" % i)
            return False
        try:
            public_keys_param[i].verify(checkpointStatement.signature)
        except Exception:
            logger.debug("Checkpoint Statement number = %d is tempered" % i)
            return False   
        i = i + 1

    return True       