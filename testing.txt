The testing is performed by using a separate config.txt.
Client workloads, multinode and failure scenarios are documented in each config file.

To run each file with a particular config
1. For non-multi node scenario
    python3 -m da main.da CONFIG_FILE
2. For multi node scenario
    a) python3 -m da -n MainNode main.da CONFIG_FILE
    b) python3 -m da -n NODE_NAME -D main.da CONFIG_FILE

Pesudorandom
Generates request using random number given a particular seed.
1. Picks key and value from 10 Alphabets
2. Picks slice indices from 0-3 for left, 0-5 for right

All logs are captured in byzantine.log

Below config files are briefly defined by its description and expected results.

1.  file : config_simple.txt
    description : Three simple operations : [put('movie','star'); append('movie',' wars'); get('movie')]
    expected : state of all replicas : {'movie': 'star wars'}

2.  file : config_stress_test.txt
    description :   To perform stress test, 2000 pseudorandom requests, 1000 by 2 clients each
    expected : normal operations and exits

3.  file : config_fail_client_req_change_op.txt
    description :  client_request + change operation, change operation on a client request by client
    expected : 1. Client detects that operation has changed
               expected state : {'movie': 'star wars'}, output state : {'movie': 'star'}

4.  file : config_fail_client_req_change_result.txt
    description : client_request + change result, change result on a client request by client
    expected : 1. Next Replica and Client both detects result is tampered on result shuttle
               expected state : {'movie': 'star wars'}, output state : {'movie': 'star wars'}

5.  file : config_fail_client_req_drop_result_stmnt.txt
    description : client_request + drop result statement, drops result proof from the head
    expected : 1. Next Replica and Client both detects result proof is tampered on result shuttle
               expected state : {'movie': 'star wars'}, output state : {'movie': 'star'}

6.  file : config_fail_shuttle_req_change_op.txt
    description : shuttle + change operation, change operation on incoming shuttle by a replica.
                  (This does not apply to head.)
    expected : 1. Replica identifies changed operation and stops forwarding
               2. Client times out
               3. Client retransmits request
               4. Replicas forward to head
               5. Head waits for result_shuttle to arrive
               6. Head times out
               7. Client times out
               expected state : {'movie': 'star wars'}, output state : {'movie': 'star'}

7.  file : config_fail_shuttle_req_change_result.txt
    description : shuttle + change result, change result on incoming shuttle by a replica.
                  (This does not apply to head.)
    expected : 1. Next Replica will identify when result has changed on result shuttle.
               2. Client also will identify that result has changed.
               expected state : {'movie': 'star wars'}, output state : {'movie': 'star wars'}

8.  file : config_fail_shuttle_req_drop_result_stmnt.txt
    description :  shuttle + drop result statement, drops result proof on incoming shuttle by replica.
                   (This does not apply to head.)
    expected : 1. Replica will identify when result has changed on result shuttle.
               2. Client also will identify that result has changed.
               expected state : {'movie': 'star wars'}, output state : {'movie': 'star wars'}

9.  file : config_fail_result_shuttle_req_change_result.txt
    description : result_shuttle + change result, changes result when result shuttle arrives
    expected : 1. Only Replica will identify when result has changed on result shuttle.
               expected state : {'movie': 'star wars'}, output state : {'movie': 'star wars'}

10. file : config_fail_result_shuttle_req_drop_result_stmnt.txt
    description : result_shuttle + drop result proof, drops result proof of head when result shuttle arrives
    expected : 1. Only Replica will identify when result has changed on result shuttle.
               expected state : {'movie': 'star wars'}, output state : {'movie': 'star wars'}

11. file : config_fail_forwarded_req_change_op.txt
    description : forwarded_request + change_operation,
               1. force forwarded request by failing operation on one of the clients
               2. change operation on forwarded request
    expected : 1. Replica identifies changed operation and stops forwarding
               2. Client times out
               3. Client retransmits request
               4. Replicas forward to head
               5. Head waits for result_shuttle to arrive. No operation on forward_request applicable
               6. Head times out
               7. Client times out
               expected state : {'movie': 'star wars'}, output state : {'movie': 'star wars'}

12. file : config_multinode.txt
    description : to test on multiple node
    commands : 1. python3 -m da -n MainNode main.da test_configs/config_multinode.txt
               2. python3 -m da -n ClientNode -D main.da test_configs/config_multinode.txt
    expected:  1. Normal execution on two different terminal nodes.
               2. Clients and (Olympus and Replicas) on separate terminals

13. file : config_default.txt
    description : default config provided in README without failure conditions of phase 3
    expected : {'movie': 'star wars', 'jedi': 'luke', 'B': 'E'}

