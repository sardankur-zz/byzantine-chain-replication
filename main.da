import sys
import logging


## code for logging

def get_logger():
    logger = logging.getLogger('byzantine_state_replication')
    logger.setLevel(logging.DEBUG)

    # file handler
    fh = logging.FileHandler('byzantine.log')
    fh.setLevel(logging.DEBUG)

    # console handler
    ch = logging.StreamHandler()
    ch.setLevel(logging.DEBUG)

    formatter = logging.Formatter('%(asctime)s : %(levelname)s : %(message)s')

    ch.setFormatter(formatter)
    fh.setFormatter(formatter)

    # add the handlers to logger
    logger.addHandler(ch)
    logger.addHandler(fh)

    return logger


logger = get_logger()


class Operation():
    @staticmethod
    def put(dictionary, key, val):
        dictionary[key] = val

    @staticmethod
    def get(dictionary, key):
        return dictionary[key]

    @staticmethod
    def slice(dictionary, key, slice):
        split = slice.split(":")
        dictionary[key] = dictionary[key][int(split[0]): int(split[1])]

    @staticmethod
    def append(dictionary, key, val):
        dictionary[key] = dictionary[key] + val

    @staticmethod
    def do_op(op, dictionary, key, val=None):
        if op == 'put':
            return Operation.put(dictionary, key, val)
        elif op == 'get':
            return Operation.get(dictionary, key)
        elif op == 'slice':
            return Operation.slice(dictionary, key, val)
        elif op == 'append':
            return Operation.append(dictionary, key, val)
        else:
            raise Exception("Invalid Operation")


class Olympus():
    def reconfigure(self):
        pass


class Client():
    pass


class Replica(process):
    def setup(replicaNum: int, prev: Replica, nextr: Replica):
        output("Setup completed for replicaNum=", replicaNum)

    def receive(msg=('Shuttle',), from_=p):
        output("Shuttle Recieved at replicaNum=", replicaNum)
        if (nextr):
            output("Shuttle Forwarded from replicaNum=", replicaNum)
            send(('Shuttle',), to=nextr)
        else:
            output("Reverse_Shuttle Started from replicaNum=", replicaNum)
            send(('Reverse_Shuttle',), to=prev)

    def receive(msg=('Client_Request',), from_=p):
        output("Client request Recieved at replicaNum=", replicaNum)
        output("Shuttle Forwarded from replicaNum=", replicaNum)
        send(('Shuttle',), to=nextr)

    def receive(msg=('Reverse_Shuttle',), from_=p):
        output("Reverse_Shuttle Recieved at replicaNum=", replicaNum)
        output("Reverse Shuttle Advanced from replicaNum=", replicaNum)
        send(('Reverse_Shuttle',), to=prev)

    def run():
        output("Start Running replicaNum=", replicaNum)
        while (True):
            await(0 > 1)
        output("End Running replicaNum=", replicaNum)


def read_configuration(filename):
    config = {}
    with open('config.txt', 'r') as f:
        for line in f:
            if line[0] != '#':
                (key, sep, val) = line.partition('=')
                if len(sep) != 0:
                    val = val.strip()
                    config[key.strip()] = int(val) if str.isdecimal(val) else val
    print(config)
    return config


def run_test(config):
    pass


def main():
    config(clock='Lamport')

    rnum = 5
    replicas = [];
    for i in range(rnum):
        replica = new(Replica, num=1)
        replicas.append(replica)

    setup(replicas[0], (0, None, replicas[1]))

    for i in range(1, rnum - 1):
        setup(replicas[i], (i, replicas[i - 1], replicas[i + 1]))

    setup(replicas[rnum - 1], (rnum - 1, replicas[rnum - 2], None))

    for i in range(rnum):
        start(replicas[i])

    send(('Client_Request',), to=replicas[0])

