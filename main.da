import sys
import time
import re
import json

common = import_da("common")
Operation = common.Operation
get_logger = import_da("app_logging").get_logger
Olympus = import_da("olympus").Olympus
Client = import_da("client").Client


logger = get_logger("MAIN")

def read_configuration(filename):    
    test_config = {}
    with open(filename, 'r') as f:
        for line in f:
            if line[0] != '#':
                (key, sep, val) = line.partition('=')
                if len(sep) != 0:
                    val = val.strip()
                    test_config[key.strip()] = int(val) if str.isdecimal(val) else val
    return test_config

def main():
   
    if(len(sys.argv) != 2):
        logger.error("Number or arguments is incorrect")
        exit(1)
     
    config(clock='Lamport') 
     

    # read configuration
    logger.info("Reading Configuration")
    test_config = read_configuration(sys.argv[1])
    

    # parse configuration    
    test_config['head_timeout'] = test_config.get('head_timeout', 2000) / 1000
    test_config['nonhead_timeout'] = test_config.get('nonhead_timeout', 2000) / 1000
    test_config['client_timeout'] = test_config.get('client_timeout', 2000) / 1000    
    multi_node = test_config.get('multi_node', 'False') == "True"

    
    failures = {}
    workload = {}
    host = {"client" : {}, "replica" : {}}    

    for key in test_config.keys():
        if key[:8] == "failures":
            c, r = key[8:][:-1][1:].split(",")
            failures[c] = failures.get(c, {})
            failures[c][r] = failures[c].get(r, [])
            failure_op = test_config[key].split(";")
            for op in failure_op:
                trigger, failure = op.split("),")
                failure = failure[:-2]
                trigger, args = trigger.split("(")
                arg1, arg2 = args.split(",")
                formatted_op = [(trigger.strip(), arg1.strip(), arg2.strip()), failure.strip()]
                failures[c][r].append(formatted_op)
        elif key[:11] == "host_client" and multi_node:
            c = key[11:][:-1][1:]
            host["client"][c] = test_config[key]
        elif key[:12] == "host_replica" and multi_node:    
            r = key[12:][:-1][1:]
            host["replica"][c] = test_config[key]
        elif key[:12] == "host_olympus" and multi_node:
            host["olympus"] = test_config[key]    
        elif key[:8] == "workload":
            c = key[8:][:-1][1:] 
            workload_lines = test_config[key].split(';')
            opSequence = []
            for line in workload_lines:
                line = line.replace("'", "")
                words = re.split('[(),]+',line.strip())
                opSequence.append(words[:-1])

            if opSequence[0][0] == 'pseudorandom':
                opSequence = Operation.generate_requests(int(opSequence[0][1]), int(opSequence[0][2]))
            workload[c] = opSequence


    # start Olympus
    logger.info("Creating Olympus")
    olympus = new(Olympus, (test_config['head_timeout'], \
        test_config['nonhead_timeout'], test_config['t'], failures, host["replica"]), \
        num=1, at=host.get("olympus", "default"))
    start(olympus)    
    
    send(('olympus_run',), to=olympus)    

    time.sleep(0.2)

    # start clients
    logger.info("Creating Clients")
    clients = []    
    for i in range(test_config["num_client"]):
        client = new(Client, num=1, at=host["client"].get(str(i), "default"))
        setup(client, (i, test_config['client_timeout'], olympus))
        start(client)

        index = 0
        opSequence = workload[str(i)]
        while index < len(opSequence):
            nextIndex = min(index + 100, len(opSequence))
            clk = logical_clock()
            send(('client_workload', opSequence[index:nextIndex]), to=client)
            await(some(received(('client_workload_ack', cid), clk=rclk), has= (rclk > clk and i == cid)))            
            index = nextIndex

        clients.append(client)         



    logger.info("Running Test Case : %s" % test_config.get('test_case_name', ''))
    for client in clients:
        send(('client_run',), to=client)


    # waiting for clients to finish their workload        
    await(len(setof(p, received(('client_shut',), from_=p))) == len(clients))    
    logger.info("Clients are shut")

    send(("olympus_shutdown",), to=olympus)

    if await(len(setof(p, received(('olympus_shut', replica_state), from_=p))) == 1):
        replica_states = setof(replica_state, received(('olympus_shut', replica_state), from_=p))
        replica_states = json.loads(next(iter(replica_states)))
        if 'test_workload' in test_config.keys():
            for i, item in enumerate(replica_states):
                test_json = json.loads(test_config['test_workload'].replace("'", "\""))
                if test_json != item['dictionary']:
                    logger.error("Replica rid=%d does not match test scenario = %s" % (item['rid'], item['dictionary']))
                else:
                    logger.info("Replica rid=%d matches test scenario = %s" % (item['rid'], item['dictionary']))
        else:
            for i, item in enumerate(replica_states):
                logger.info("Replica state for rid =%d is = %s"  % (item['rid'], item['dictionary']))
        
        logger.info("Olympus is shut")
        # check validity for each test case
    elif timeout(test_config['client_timeout']):
        logger.error("Timeout from Olympus")
        send(("olympus_force_shutdown",), to=olympus)        
    
    logger.info("Terminating")