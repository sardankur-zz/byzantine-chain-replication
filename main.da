import sys
import logging
#import nacl.signing


class OpArgs():
    def __init__(self, opType, key, val=None):
        self.opType = opType
        self.key = key
        self.val = val   

    def __str__(self):
        return "%s - %s - %s" % (self.opType, self.key, self.val)

class OrderStatement():
    def __init__(self, slot_number, operation, signature):
        self.slot_number = slot_number
        self.operation = operation
        self.signature = signature

    def __str__(self):
        return "%s - %s - %s" % (self.slot_number, self.operation, self.signature)

class ResultStatement():
    def __init__(self, operation, result_hash, signature):
        self.operation = operation
        self.result_hash = result_hash
        self.signature = signature

    def __str__(self):
        return "%s - %s - %s" % (self.operation, self.result_hash, self.signature)

class Shuttle():
    def __init__(self, opArgs):
        self.opArgs = opArgs  
        self.order_proof = []
        self.result_proof = []

    def __str__(self):
        return str("Opt Args : %s\norder_proof: %s\nresult_proof: %s" % (self.opArgs, self.order_proof, self.result_proof))


def get_logger():
    logger = logging.getLogger('byzantine_state_replication')
    logger.setLevel(logging.DEBUG)

    # file handler
    fh = logging.FileHandler('byzantine.log')
    fh.setLevel(logging.DEBUG)

    # console handler
    ch = logging.StreamHandler()
    ch.setLevel(logging.DEBUG)

    formatter = logging.Formatter('%(asctime)s : %(levelname)s : %(message)s')

    ch.setFormatter(formatter)
    fh.setFormatter(formatter)

    # add the handlers to logger
    logger.addHandler(ch)
    logger.addHandler(fh)

    return logger


logger = get_logger()


class Operation():
    @staticmethod
    def put(dictionary, key, val):
        dictionary[key] = val
        return 'OK'
    @staticmethod
    def get(dictionary, key):
        return dictionary.get(key,'')

    @staticmethod
    def slice(dictionary, key, slice):
        split = slice.split(":")
        if key in dictionary.keys(): #TODO: check whether slice is valid or not
            dictionary[key] = dictionary[key][int(split[0]): int(split[1])]
            return 'OK'
        else:    
            return 'fail'

    @staticmethod
    def append(dictionary, key, val):
        if key in dictionary.keys():
            dictionary[key] = dictionary[key] + val
            return 'OK'
        else:    
            return 'fail'   

    @staticmethod
    def do_op(dictionary, opArgs):
        if opArgs.opType == 'put':
            return Operation.put(dictionary, opArgs.key, opArgs.val)
        elif opArgs.opType == 'get':
            return Operation.get(dictionary, opArgs.key)
        elif opArgs.opType == 'slice':
            return Operation.slice(dictionary, opArgs.key, opArgs.val)
        elif opArgs.opType == 'append':
            return Operation.append(dictionary, opArgs.key, opArgs.val)
        else:
            raise Exception("Invalid Operation")


class Olympus():
    def reconfigure(self):
        pass


class Client():
    pass










class Replica(process):

    def setup(replicaNum: int, prev: Replica, nextr: Replica):
        self.slot_number = 0
        self.dictionary = {}
        output("Setup completed for replicaNum=", replicaNum)

    def run():
        output("Start Running replicaNum=", replicaNum)
        while (True):
            await(0 > 1)
        output("End Running replicaNum=", replicaNum)    

    def receive(msg=('Client_Request', opArgs), from_=p):
        output("Client request Recieved at replicaNum=", replicaNum)
        slot_number = slot_number + 1;
        shuttle = Shuttle(opArgs)
        shuttle.order_proof.append(OrderStatement(slot_number, opArgs, 'fakeSign')) #sign 
        result = Operation.do_op(dictionary, opArgs)
        shuttle.result_proof.append(ResultStatement(opArgs, result, 'fakeSign')) #sign and result Hash
        output("Shuttle Forwarded from replicaNum=", replicaNum)
        send(('Shuttle',shuttle), to=nextr)

    def receive(msg=('Shuttle', shuttle), from_=p):
        output("Shuttle Recieved at replicaNum=", replicaNum)
        slot_number = slot_number + 1;
        shuttle.order_proof.append(OrderStatement(slot_number, shuttle.opArgs, 'fakeSign'))
        result = Operation.do_op( dictionary, shuttle.opArgs)
        shuttle.result_proof.append(ResultStatement(shuttle.opArgs, result, 'fakeSign'))
        
        if (nextr):
            output("Shuttle Forwarded from replicaNum=", replicaNum)
            send(('Shuttle',shuttle), to=nextr)
        else:
            output("Reverse_Shuttle Started from replicaNum=", replicaNum)
            output(shuttle)
            send(('Reverse_Shuttle',shuttle.result_proof), to=prev)

    def receive(msg=('Reverse_Shuttle',result_proof), from_=p):
        output("Reverse_Shuttle Recieved at replicaNum=", replicaNum)
        #cache the result proof
        if(prev):
            output("Reverse Shuttle Advanced from replicaNum=", replicaNum)
            send(('Reverse_Shuttle',result_proof), to=prev)








def read_configuration(filename):
    config = {}
    with open('config.txt', 'r') as f:
        for line in f:
            if line[0] != '#':
                (key, sep, val) = line.partition('=')
                if len(sep) != 0:
                    val = val.strip()
                    config[key.strip()] = int(val) if str.isdecimal(val) else val
    print(config)
    return config


def run_test(config):
    pass


def main():
    config(clock='Lamport')

    rnum = 5
    replicas = [];
    for i in range(rnum):
        replica = new(Replica, num=1)
        replicas.append(replica)

    setup(replicas[0], (0, None, replicas[1]))

    for i in range(1, rnum - 1):
        setup(replicas[i], (i, replicas[i - 1], replicas[i + 1]))

    setup(replicas[rnum - 1], (rnum - 1, replicas[rnum - 2], None))

    for i in range(rnum):
        start(replicas[i])

    send(('Client_Request',OpArgs('put', 'movie', 'star')), to=replicas[0])
    
    '''
    dictionary = {}
    temp = Operation.do_op('get', dictionary, 'movie')
    output(temp)
    Operation.do_op('put', dictionary, 'movie', 'star')
    Operation.do_op('append', dictionary, 'movie', ' wars')
    temp = Operation.do_op('get', dictionary, 'movie')
    output(temp)
    Operation.do_op('slice', dictionary, 'movie', '5:9')
    temp = Operation.do_op('get', dictionary, 'movie')
    output(temp)
    '''
