import sys
import time
import re
import json

common = import_da("common")
Operation = common.Operation
get_logger = import_da("app_logging").get_logger
Olympus = import_da("olympus").Olympus
Client = import_da("client").Client


logger = get_logger("MAIN")

def read_configuration(filename):
    logger.info("Reading Test Configuration")
    test_config = {}
    with open(filename, 'r') as f:
        for line in f:
            if line[0] != '#':
                (key, sep, val) = line.partition('=')
                if len(sep) != 0:
                    val = val.strip()
                    test_config[key.strip()] = int(val) if str.isdecimal(val) else val
    return test_config

def main():

    if(len(sys.argv) != 2):
        logger.error("Number or arguments is incorrect")
        exit(1)

    test_config = read_configuration(sys.argv[1])

    # start olympus
    olympus = new(Olympus, [test_config['head_timeout'], test_config['nonhead_timeout'], test_config['t']], num=1)
    start(olympus)

    send(('init',), to=olympus)
    # Wait for reconfiguration

    # start clients
    clients = new(Client, num = 2 * test_config['t'] + 1)
    for i, client in enumerate(clients):
        workload_string = test_config['workload['+str(i)+']'];
        workload_lines = workload_string.split(';')
        opSequence = []
        for line in workload_lines:
            line = line.replace("'", "")
            words = re.split('[(),]+',line.strip())
            opSequence.append(words[:-1])

        if opSequence[0][0] == 'pseudorandom':
            opSequence = Operation.generate_requests(int(opSequence[0][1]), int(opSequence[0][2]))

        setup(client, (i, test_config['client_timeout'], opSequence, olympus))
        
    start(clients)

    time.sleep(0.2)

    # shutdown system
    send(("shutdown",), to=clients)

    await(each(c in clients, has=received(('shut',), from_=c)))
    logger.info("Clients are shut")

    send(("shutdown",), to=olympus)

    if await(len(setof(p, received(('shut', replica_state), from_=p))) == 1):
        replica_states = setof(replica_state, received(('shut', replica_state), from_=p))
        replica_states = json.loads(next(iter(replica_states)))
        if 'test_workload' in test_config.keys():
            for i, item in enumerate(replica_states):
                if test_config['test_workload'] != str(item['dictionary']):
                    logger.error("Replica rid=%d in inconsistent state = %s" % (item['rid'], item['dictionary']))
                else:
                    logger.info("Replica rid=%d in consistent state = %s" % (item['rid'], item['dictionary']))

        # check validity for each test case
    elif timeout(test_config['client_timeout']):
        logger.error("Timeout from olympus")

    logger.info("Olympus is shut")
