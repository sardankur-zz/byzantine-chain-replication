import sys
import time
get_logger = import_da("app_logging").get_logger
Olympus = import_da("olympus").Olympus
Client = import_da("client").Client

logger = get_logger("MAIN")

def read_configuration(filename):
    logger.info("Reading Test Configuration")
    test_config = {}
    with open(filename, 'r') as f:
        for line in f:
            if line[0] != '#':
                (key, sep, val) = line.partition('=')
                if len(sep) != 0:
                    val = val.strip()
                    test_config[key.strip()] = int(val) if str.isdecimal(val) else val
    return test_config


def main():

    if(len(sys.argv) != 2):
        logger.error("Number or arguments is incorrect")
        exit(1)

    test_config = read_configuration(sys.argv[1])

    # start olympus
    olympus = new(Olympus, [test_config['head_timeout'], test_config['nonhead_timeout'], test_config['t']], num=1)
    start(olympus)

    send(('init',), to=olympus)
    # Wait for reconfiguration

    # start clients
    clients = new(Client, num = 2 * test_config['t'] + 1)
    for i, client in enumerate(clients):
        setup(client, (i, test_config['client_timeout'], olympus))
    start(clients)

    # run the test


    # shutdown system
    send(("shutdown",), to=clients)
    send(("shutdown",), to=olympus)

    await(each(c in clients, has=received(('shut',), from_=c)))
    logger.info("Clients are shut")

    await(each(o in olympus, has=received(('shut',), from_=o)))
    logger.info("Olympus is shut")
